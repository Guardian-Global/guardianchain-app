
üë• User Interaction Explorer
üì¶ SQL: user ‚Üí capsule action log
sql
Copy
Edit
create table if not exists user_capsule_interactions (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null,
  capsule_id uuid not null,
  action text check (action in ('view', 'share', 'unlock', 'mint')),
  created_at timestamptz default now()
);
üß† API: /api/users/[id]/interactions
ts
Copy
Edit
export async function GET(req: NextRequest, { params }) {
  const { data, error } = await supabase
    .from("user_capsule_interactions")
    .select("*")
    .eq("user_id", params.id)
    .order("created_at", { ascending: false });

  return NextResponse.json({ data, error });
}
‚öõÔ∏è UI: UserInteractionExplorer.tsx
tsx
Copy
Edit
export default function UserInteractionExplorer({ userId }) {
  const { data } = useSWR(`/api/users/${userId}/interactions`);

  if (!data) return <p>Loading...</p>;

  return (
    <div className="bg-black text-white p-4 rounded-xl">
      <h3 className="text-xl font-bold text-cyan-400">üß≠ Interaction History</h3>
      <ul className="mt-4 space-y-2">
        {data?.data?.map(entry => (
          <li key={entry.id}>
            <span className="text-cyan-300 font-semibold">{entry.action}</span> on capsule{" "}
            <span className="text-yellow-400">{entry.capsule_id.slice(0, 8)}...</span>{" "}
            @ {new Date(entry.created_at).toLocaleString()}
          </li>
        ))}
      </ul>
    </div>
  );
}
üß† Show Behavior Labels on Capsule Cards
Add to capsule fetch response:
ts
Copy
Edit
const behavior = await supabase
  .from("capsule_behavior_labels")
  .select("label")
  .eq("capsule_id", capsuleId)
  .single();
Capsule Card Update:
tsx
Copy
Edit
{capsule.behavior_label && (
  <span className="text-xs text-purple-400 bg-purple-900 px-2 py-1 rounded">
    üß† {capsule.behavior_label}
  </span>
)}
‚è∞ Weekly Capsule Behavior Audit (Cron Job)
scripts/analyzeCapsules.ts
ts
Copy
Edit
const { data: capsules } = await supabase
  .from("capsules")
  .select("id")
  .eq("status", "active");

for (const { id } of capsules) {
  const stats = await fetch(`/api/capsule/stats/${id}`).then(r => r.json());
  const label = await runAiLabelingPrompt(stats);
  await supabase.from("capsule_behavior_labels").upsert({ capsule_id: id, label });
}
Use cron-job.org, Replit Deploy Schedule, or GitHub Actions cron to run every Monday 3AM.

