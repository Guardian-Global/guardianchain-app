âœ… Finalizing Capsule Governance & Mint Stack Integration

---

### ðŸ§¬ Show Lineage + DAO Certs in `/profile` View

**Component:**
```tsx
// /components/profile/ProfileCapsuleLineage.tsx
import CapsuleLineageGraph from '../CapsuleLineageGraph';

export default function ProfileCapsuleLineage({ capsuleId }) {
  const { data, isLoading } = useSWR(`/api/capsule/lineage/${capsuleId}`, fetcher);
  if (isLoading) return <p>Loading graph...</p>;
  return <CapsuleLineageGraph data={data} />;
}
```

**Badge Indicator:**
```tsx
// Inside CapsuleCard.tsx or ProfileCapsuleItem.tsx
{capsule.dao_certified && <span className="badge badge-success">DAO Certified âœ…</span>}
```

**API:**
```ts
// /api/capsule/lineage/[id].ts
const lineage = await db.capsule_lineage.findMany({
  where: { parent_capsule: id },
  include: { child: true },
});
res.json(lineage);
```

---

### ðŸ”— GTT Token Contract Transfer on Mint

**Smart Contract Snippet (Solidity):**
```solidity
function mintCapsule(address user, string memory cid) public returns (uint256) {
  require(balanceOf(user) >= mintPrice, "Insufficient GTT");
  _burn(user, mintPrice);
  uint256 tokenId = _mint(user, cid);
  emit CapsuleMinted(user, tokenId, cid);
  return tokenId;
}
```

**Frontend Call (ethers.js):**
```ts
const contract = new ethers.Contract(GTT_CONTRACT_ADDRESS, ABI, signer);
const tx = await contract.mintCapsule(userAddress, ipfsCID);
await tx.wait();
```

---

### ðŸ“¦ Export Capsule Minting System (for GitHub or ZIP)

**Files to export:**
- `routes/capsule.ts` â€” capsule mint logic (with cert + GTT)
- `components/MintCapsuleButton.tsx` â€” UI logic for tier, payment, or chain
- `components/CapsuleLineageGraph.tsx` â€” visual graph
- `components/profile/ProfileCapsuleLineage.tsx` â€” profile injection
- `contracts/GTTCapsule.sol` â€” mint contract w/ burn logic
- `sql/capsule_lineage.sql` â€” lineage schema + triggers

âœ… GitHub-ready, or bundled for ZIP export.

---

Would you like me to:
- Generate all files + README into a full ZIP bundle now?
- Push directly to GitHub with full commit logs?
- Add DAO voting hooks or GTT staking multipliers before export?
