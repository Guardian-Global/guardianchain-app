// ✅ FILE: lib/auth.ts
import { getServerSession } from "next-auth";
import { authOptions } from "@/pages/api/auth/[...nextauth]";

export const getUserFromSession = async (req: any, res: any) => {
  const session = await getServerSession(req, res, authOptions);
  if (!session) return null;
  return session.user;
};


// ✅ FILE: pages/vault.tsx
"use client";

import { useQuery } from "@tanstack/react-query";
import { useWallet } from "@/hooks/useWallet";
import { useState } from "react";
import { writeContract } from "@wagmi/core";
import { parseAbi } from "viem";

const vaultAddress = "0xYourVaultContractAddress";
const vaultABI = parseAbi([
  "function claimYield(address user) external returns (uint256)"
]);

export default function VaultPage() {
  const { address } = useWallet();
  const [txHash, setTxHash] = useState("");
  const [claiming, setClaiming] = useState(false);

  const { data, isLoading } = useQuery({
    queryKey: ["claimable", address],
    queryFn: async () => {
      const res = await fetch(`/api/vault/claimable?owner=${address}`);
      if (!res.ok) throw new Error("Failed to fetch claimable yield");
      return res.json();
    },
    enabled: !!address,
  });

  const claimYield = async () => {
    if (!address) return;
    setClaiming(true);
    try {
      const result = await writeContract({
        address: vaultAddress,
        abi: vaultABI,
        functionName: "claimYield",
        args: [address],
      });
      setTxHash(result.hash);
    } catch (err) {
      console.error("Claim failed", err);
    }
    setClaiming(false);
  };

  return (
    <div className="max-w-xl mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-bold">Vault</h1>
      {isLoading ? (
        <p>Loading yield info...</p>
      ) : (
        <div className="p-4 bg-white shadow rounded">
          <p className="text-sm text-gray-600">GTT Available to Claim:</p>
          <p className="text-2xl font-bold">{data.amount} GTT</p>
          <button
            disabled={claiming}
            onClick={claimYield}
            className="mt-4 bg-yellow-600 text-white px-4 py-2 rounded"
          >
            {claiming ? "Claiming..." : "Claim GTT"}
          </button>
          {txHash && (
            <p className="text-xs mt-2">Tx: <a href={`https://polygonscan.com/tx/${txHash}`} target="_blank" className="underline text-blue-600">{txHash}</a></p>
          )}
        </div>
      )}
    </div>
  );
}


// ✅ FILE: pages/api/vault/claimable.ts
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";
import { calculateCapsuleYield } from "@/utils/calculateYield";

const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { owner } = req.query;
  if (!owner) return res.status(400).json({ error: "Missing owner" });

  const { data, error } = await supabase.from("capsules").select("created_at").eq("owner", owner);
  if (error) return res.status(500).json({ error });

  const yields = data.map((c) => parseFloat(calculateCapsuleYield(c.created_at)));
  const totalYield = yields.reduce((a, b) => a + b, 0);

  res.status(200).json({ amount: totalYield.toFixed(4) });
}
