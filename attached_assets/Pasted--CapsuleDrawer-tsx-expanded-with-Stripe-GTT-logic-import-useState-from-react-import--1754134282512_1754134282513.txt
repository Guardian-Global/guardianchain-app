// CapsuleDrawer.tsx (expanded with Stripe + GTT logic)
import { useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

export default function CapsuleDrawer() {
  const [open, setOpen] = useState(false);
  const [content, setContent] = useState("");
  const [loading, setLoading] = useState(false);

  const submitCapsule = async () => {
    setLoading(true);
    const { error } = await supabase.from("capsules").insert({ content });
    if (!error) {
      await fetch("/api/trigger-stripe"); // triggers Stripe + GTT payout
      setOpen(false);
    }
    setLoading(false);
  };

  return (
    <>
      <button
        onClick={() => setOpen(true)}
        className="fixed bottom-4 left-4 bg-black text-white px-4 py-2 rounded shadow-lg z-40"
      >
        📦 New Capsule
      </button>
      {open && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-6 w-full max-w-xl">
            <h3 className="text-lg font-bold mb-2">Submit Veritas Capsule</h3>
            <textarea
              className="w-full p-2 border rounded mb-4"
              placeholder="Your memory, sealed..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
            />
            <div className="flex justify-end gap-2">
              <button className="px-4 py-2 bg-gray-300 rounded" onClick={() => setOpen(false)}>
                Cancel
              </button>
              <button
                className="px-4 py-2 bg-indigo-600 text-white rounded"
                onClick={submitCapsule}
                disabled={loading}
              >
                {loading ? "Sealing..." : "Submit + Earn GTT"}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}


// ReplayCapsule.tsx (basic yield trigger on unlock)
export default function ReplayCapsule({ capsuleId }: { capsuleId: string }) {
  const handleReplay = async () => {
    await fetch(`/api/replay-capsule?id=${capsuleId}`); // triggers yield logic
    alert("Capsule replayed. GTT issued to author.");
  };

  return (
    <button
      onClick={handleReplay}
      className="mt-4 px-4 py-2 bg-green-600 text-white rounded"
    >
      🔁 Replay + Release Yield
    </button>
  );
}


// LanguageSwitcher.tsx
import { useTranslation } from "react-i18next";

export default function LanguageSwitcher() {
  const { i18n } = useTranslation();

  return (
    <div className="text-sm space-x-2">
      <button onClick={() => i18n.changeLanguage("en")}>🇺🇸 EN</button>
      <button onClick={() => i18n.changeLanguage("es")}>🇪🇸 ES</button>
    </div>
  );
}


// Sidebar.tsx (DAO-only route visibility)
const routes = [
  { name: "Dashboard", href: "/admin", roles: ["admin", "dao-owner"] },
  { name: "Capsules", href: "/capsules", roles: ["guest", "member", "admin"] },
  { name: "Replay", href: "/replay", roles: ["member", "moderator"] },
  { name: "Yield", href: "/yield", roles: ["admin", "dao-owner"] },
  { name: "DAO", href: "/dao", roles: ["dao-owner"] },
];

const Sidebar = ({ userTier = "guest" }: { userTier?: string }) => {
  return (
    <aside className="w-64 bg-white border-r hidden md:block">
      <div className="p-4 font-bold text-xl tracking-tight">🛡️ GuardianChain</div>
      <ul className="space-y-2">
        {routes
          .filter((r) => r.roles.includes(userTier))
          .map((route) => (
            <li key={route.name} className="px-4 py-2 hover:bg-gray-100">
              <a href={route.href} className="block text-gray-800 font-medium">
                {route.name}
              </a>
            </li>
          ))}
      </ul>
    </aside>
  );
};

export default Sidebar;
