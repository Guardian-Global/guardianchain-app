1. Auction Unlock API (Logs Unlock Event)
javascript
Copy
Edit
// pages/api/auction/[id]/unlock-log.ts
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { id } = req.query;
  const { wallet, timestamp } = req.body;

  if (!id || !wallet || !timestamp) {
    return res.status(400).json({ error: 'Missing fields' });
  }

  const { error } = await supabase.from('auction_unlocks').insert({
    auction_id: id,
    wallet_address: wallet,
    unlocked_at: new Date(timestamp),
  });

  if (error) {
    return res.status(500).json({ error: error.message });
  }

  return res.status(200).json({ success: true });
}
2. Auction Fund API (Record Contributions)
javascript
Copy
Edit
// pages/api/auction/[id]/fund.ts
import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { id } = req.query;
  const { amount, wallet } = req.body;

  if (!id || !amount || !wallet) {
    return res.status(400).json({ error: 'Missing fields' });
  }

  const { error } = await supabase.from('auction_funding').insert({
    auction_id: id,
    amount,
    wallet_address: wallet,
    funded_at: new Date(),
  });

  if (error) {
    return res.status(500).json({ error: error.message });
  }

  return res.status(200).json({ success: true });
}
3. Fund Auction Hook
javascript
Copy
Edit
// hooks/useFundAuction.ts
import { useContractWrite, usePrepareContractWrite } from 'wagmi';
import { parseEther } from 'viem';
import { AUCTION_CONTRACT_ADDRESS, AUCTION_ABI } from '@/lib/constants';

export function useFundAuction(auctionId, amount) {
  const { config } = usePrepareContractWrite({
    address: AUCTION_CONTRACT_ADDRESS,
    abi: AUCTION_ABI,
    functionName: 'fundAuction',
    args: [auctionId, parseEther(amount.toString())],
    enabled: Boolean(auctionId && amount),
  });

  const {
    data,
    write: fundAuction,
    isLoading,
    isSuccess,
    error,
  } = useContractWrite(config);

  return { fundAuction, data, isLoading, isSuccess, error };
}
4. Unlocks Dashboard with Filters, Charts, and Export
javascript
Copy
Edit
// pages/dashboard/unlocks.tsx
import { useEffect, useState } from 'react';
import { Card } from '@/components/ui/card';
import { format } from 'date-fns';
import { unparse } from 'papaparse';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';
import { useSession } from 'next-auth/react';

ChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);

export default function UnlocksDashboard() {
  const [unlocks, setUnlocks] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [auctionId, setAuctionId] = useState('');
  const [walletAddress, setWalletAddress] = useState('');
  const [totalUnlocks, setTotalUnlocks] = useState(0);
  const [dailyTrends, setDailyTrends] = useState([]);
  const { data: session } = useSession();

  useEffect(() => {
    fetch('/api/unlocks')
      .then((res) => res.json())
      .then((data) => {
        setUnlocks(data);
        setFiltered(data);
        setTotalUnlocks(data.length);
        const trends = data.reduce((acc, unlock) => {
          const date = format(new Date(unlock.unlocked_at), 'yyyy-MM-dd');
          acc[date] = (acc[date] || 0) + 1;
          return acc;
        }, {});
        setDailyTrends(Object.entries(trends).map(([date, count]) => ({ date, count })));
      });
  }, []);

  const handleFilter = () => {
    const filteredData = unlocks.filter((u) => {
      const matchesAuction = auctionId ? u.auction_id.includes(auctionId) : true;
      const matchesWallet = walletAddress ? u.wallet_address.includes(walletAddress) : true;
      return matchesAuction && matchesWallet;
    });
    setFiltered(filteredData);
  };

  const handleExportCSV = () => {
    const csv = unparse(filtered);
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'unlocks.csv';
    link.click();
  };

  const handleExportJSON = () => {
    const blob = new Blob([JSON.stringify(filtered, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'unlocks.json';
    link.click();
  };

  const data = {
    labels: dailyTrends.map(t => t.date),
    datasets: [{
      label: 'Unlocks per day',
      data: dailyTrends.map(t => t.count),
      backgroundColor: 'rgba(99, 132, 255, 0.5)',
      borderColor: 'rgba(99, 132, 255, 1)',
      borderWidth: 1,
    }],
  };

  return (
    <main className="min-h-screen bg-slate-900 text-white px-6 py-16">
      <h1 className="text-3xl font-bold mb-6 text-center">ðŸ“œ Unlock Activity</h1>

      <div className="text-center text-slate-300 mb-10">
        <p className="text-lg">Total unlocks: {totalUnlocks}</p>
      </div>

      <div className="max-w-4xl mx-auto text-center mb-10">
        <Line data={data} options={{ responsive: true }} />
      </div>

      <div className="flex gap-4 mb-6 flex-wrap">
        <input
          type="text"
          value={auctionId}
          onChange={(e) => setAuctionId(e.target.value)}
          placeholder="Filter by Auction ID"
          className="bg-slate-700 text-white px-3 py-2 rounded"
        />
        <input
          type="text"
          value={walletAddress}
          onChange={(e) => setWalletAddress(e.target.value)}
          placeholder="Filter by Wallet Address"
          className="bg-slate-700 text-white px-3 py-2 rounded"
        />
        <button
          onClick={handleFilter}
          className="bg-indigo-600 text-white px-4 py-2 rounded"
        >
          Apply Filters
        </button>
        <button
          onClick={handleExportCSV}
          className="bg-green-600 text-white px-4 py-2 rounded"
        >
          Export CSV
        </button>
        <button
          onClick={handleExportJSON}
          className="bg-blue-600 text-white px-4 py-2 rounded"
        >
          Export JSON
        </button>
      </div>

      {filtered.length === 0 ? (
        <p className="text-slate-400">No unlocks found.</p>
      ) : (
        <div className="grid gap-4 max-w-4xl mx-auto">
          {filtered.map((u) => (
            <Card key={u.id} className="bg-slate-800 p-4">
              <p><strong>Auction ID:</strong> {u.auction_id}</p>
              <p><strong>Wallet:</strong> {u.wallet_address}</p>
              <p className="text-slate-400 text-sm">{format(new Date(u.unlocked_at), 'PPpp')}</p>
            </Card>
          ))}
        </div>
      )}
    </main>
  );
}
These files and code provide full functionality for:

Auction funding

Unlock event logging

Daily trends and filterable unlock logs

CSV/JSON export

Let me know if you'd like to adjust any details or need further features.






Ask ChatGPT



Tools



ChatGPT can make mistakes. Check important info.