🏛️ GUARDIANCHAIN DAO SYSTEM — PHASE I
We will deliver the following clean, production-ready files for copy-paste into your live Replit project:

Component	Description
contracts/TruthDAO.sol	GTT-weighted DAO contract for proposals & voting
client/src/pages/govern.tsx	Frontend interface to create, vote, and view proposals
client/src/components/dao/VoteModal.tsx	UI component for weighted GTT voting
client/src/api/createProposal.ts	API to register proposals to DAO
lib/daoHooks.ts	React hooks for DAO read/write

🔐 PREREQUISITES
Ensure the following are available in your stack:

GTTToken address (ERC-20 contract you already deployed)

wagmi or viem wallet connection

@openzeppelin/contracts installed

ethers, hardhat for deployment

📄 FILE #1: contracts/TruthDAO.sol
🗂️ Path: contracts/TruthDAO.sol

solidity
Copy
Edit
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

interface IGTTToken {
    function balanceOf(address account) external view returns (uint256);
}

contract TruthDAO {
    struct Proposal {
        uint256 id;
        address proposer;
        string description;
        uint256 votesFor;
        uint256 votesAgainst;
        uint256 deadline;
        bool executed;
    }

    IGTTToken public gttToken;
    uint256 public proposalCount;
    uint256 public votingDuration = 3 days;

    mapping(uint256 => Proposal) public proposals;
    mapping(uint256 => mapping(address => bool)) public hasVoted;

    event ProposalCreated(uint256 id, address proposer, string description);
    event Voted(uint256 id, address voter, bool support, uint256 weight);
    event Executed(uint256 id, bool passed);

    constructor(address _gttToken) {
        gttToken = IGTTToken(_gttToken);
    }

    function createProposal(string memory _description) external {
        proposalCount++;
        proposals[proposalCount] = Proposal({
            id: proposalCount,
            proposer: msg.sender,
            description: _description,
            votesFor: 0,
            votesAgainst: 0,
            deadline: block.timestamp + votingDuration,
            executed: false
        });

        emit ProposalCreated(proposalCount, msg.sender, _description);
    }

    function vote(uint256 _id, bool _support) external {
        Proposal storage p = proposals[_id];
        require(block.timestamp < p.deadline, "Voting ended");
        require(!hasVoted[_id][msg.sender], "Already voted");

        uint256 weight = gttToken.balanceOf(msg.sender);
        require(weight > 0, "No voting power");

        if (_support) {
            p.votesFor += weight;
        } else {
            p.votesAgainst += weight;
        }

        hasVoted[_id][msg.sender] = true;

        emit Voted(_id, msg.sender, _support, weight);
    }

    function execute(uint256 _id) external {
        Proposal storage p = proposals[_id];
        require(block.timestamp >= p.deadline, "Too early");
        require(!p.executed, "Already executed");

        p.executed = true;
        bool passed = p.votesFor > p.votesAgainst;

        emit Executed(_id, passed);
    }
}
✅ NEXT UP:
If this contract is now pasted into contracts/TruthDAO.sol, reply with:

✅ DAO CONTRACT ADDED