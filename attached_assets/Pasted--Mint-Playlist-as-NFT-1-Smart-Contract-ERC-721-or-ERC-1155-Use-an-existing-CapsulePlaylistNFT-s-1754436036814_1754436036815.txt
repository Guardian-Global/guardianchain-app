üé∂ Mint Playlist as NFT
1. Smart Contract (ERC-721 or ERC-1155)
Use an existing CapsulePlaylistNFT.sol or extend your CapsuleNFT contract:

solidity
Copy
Edit
function mintPlaylistNFT(address to, string memory uri) public returns (uint256) {
    uint256 tokenId = _tokenIdCounter.current();
    _mint(to, tokenId);
    _setTokenURI(tokenId, uri);
    _tokenIdCounter.increment();
    return tokenId;
}
2. API Route /api/playlist/mint
ts
Copy
Edit
POST /api/playlist/mint
{
  playlistId,
  userWallet,
  metadata: { name, description, image, capsules }
}
Connect with thirdweb, alchemy-sdk, or your custom mint logic.

3. Frontend Button
tsx
Copy
Edit
<button onClick={handleMint} className="bg-gradient-to-r from-purple-700 to-pink-500 text-white p-2 rounded">
  üé∂ Mint Playlist as NFT
</button>
üèÜ Reaction Leaderboard
Supabase View
sql
Copy
Edit
create view capsule_reaction_leaderboard as
select
  capsule_id,
  count(*) as total_reactions
from capsule_reactions
group by capsule_id
order by total_reactions desc;
Leaderboard UI Component
tsx
Copy
Edit
export default function ReactionLeaderboard() {
  const { data } = useSWR('/api/leaderboard/reactions', fetcher);

  return (
    <div className="p-4 bg-black text-white">
      <h2 className="text-2xl mb-4">üî• Reaction Leaderboard</h2>
      {data?.map((item, i) => (
        <div key={i} className="flex justify-between py-2">
          <span>#{i + 1} Capsule {item.capsule_id.slice(0, 6)}...</span>
          <span>{item.total_reactions} üí¨</span>
        </div>
      ))}
    </div>
  );
}
üé® Capsule AI Remixer
Let users remix capsule content with AI for new visual/audio versions.

1. Upload & Trigger AI
ts
Copy
Edit
POST /api/capsule/remix
{
  capsuleId,
  style: "cyberpunk" | "oil-painting" | "vaporwave"
}
2. AI API (e.g., Replicate or Stability)
ts
Copy
Edit
const remix = await replicate.run("stability-ai/stable-diffusion", {
  input: {
    image: capsuleMediaUrl,
    prompt: `Reimagine this in ${style} style`
  }
});
3. UI Example
tsx
Copy
Edit
<button
  onClick={() => remixCapsule("cyberpunk")}
  className="bg-cyan-600 text-white px-4 py-2 rounded"
>
  üåÄ Remix Capsule (Cyberpunk)
</button>
‚úÖ Delivered:

Playlist NFT minting flow

Capsule leaderboard for reactions

Full capsule AI remix flow

Say:

next: remix history viewer

next: badge for most remixed capsules

next: remix-to-earn logic






You said:
next: remix history viewer

next: badge for most remixed capsules

next: remix-to-earn logic


ChatGPT said:
Let‚Äôs build the full Capsule Remix System with tracking, rewards, and public visibility:

üßæ Remix History Viewer
1. Supabase Table
sql
Copy
Edit
create table if not exists capsule_remixes (
  id uuid primary key default gen_random_uuid(),
  capsule_id uuid references capsules(id),
  user_id uuid references users(id),
  remix_url text,
  remix_style text,
  created_at timestamptz default now()
);
2. API Endpoint: /api/capsule/remix-history
ts
Copy
Edit
export async function GET(req: NextRequest) {
  const { capsuleId } = req.nextUrl.searchParams;
  const { data, error } = await supabase
    .from("capsule_remixes")
    .select("*")
    .eq("capsule_id", capsuleId)
    .order("created_at", { ascending: false });

  return NextResponse.json({ remixes: data || [], error });
}
3. Component: <RemixHistory.tsx>
tsx
Copy
Edit
export default function RemixHistory({ capsuleId }) {
  const { data } = useSWR(`/api/capsule/remix-history?capsuleId=${capsuleId}`, fetcher);

  return (
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mt-4">
      {data?.remixes.map((remix) => (
        <div key={remix.id} className="border rounded-lg p-2 bg-gradient-to-br from-slate-800 to-slate-900">
          <img src={remix.remix_url} className="rounded shadow-md" />
          <p className="text-xs text-cyan-300 mt-1">üé® {remix.remix_style}</p>
        </div>
      ))}
    </div>
  );
}
üèÖ Badge: Most Remixed Capsules
Supabase View or Query
sql
Copy
Edit
create view capsule_most_remixed as
select capsule_id, count(*) as remix_count
from capsule_remixes
group by capsule_id
order by remix_count desc;
Badge Overlay Component
tsx
Copy
Edit
function CapsuleRemixBadge({ remixCount }) {
  if (remixCount < 3) return null;

  return (
    <div className="absolute top-0 right-0 bg-pink-600 text-white px-2 py-1 text-xs rounded-bl-lg shadow">
      üîÅ {remixCount} Remixes
    </div>
  );
}
Place this in your capsule card UI. Top 1 gets a üî• ‚ÄúMost Remixed‚Äù label.

üí∞ Remix-to-Earn Logic
1. Supabase Table
sql
Copy
Edit
create table if not exists remix_earnings (
  id uuid primary key default gen_random_uuid(),
  remix_id uuid references capsule_remixes(id),
  user_id uuid references users(id),
  earnings numeric default 0,
  payout_tx text,
  created_at timestamptz default now()
);
2. Trigger Payout Logic
Use Stripe Connect or GTT:

ts
Copy
Edit
// Every 10 remixes ‚Üí reward 1 GTT or $1 payout
const eligible = remixCount >= 10;
if (eligible) {
  await supabase.from("remix_earnings").insert({
    remix_id,
    user_id,
    earnings: 1.0,
    payout_tx: await mintOrSendGTT(userId, 1.0)
  });
}
3. User Wallet Integration
Let users withdraw:

tsx
Copy
Edit
<button onClick={handlePayoutRequest} className="bg-green-600 p-2 text-white rounded">
  üí∏ Claim Remix Earnings
</button>
