// ✅ AI Reply Backend — /api/assistant.ts
// Integrates with OpenAI GPT-4 or similar to respond to onboarding queries
import { NextApiRequest, NextApiResponse } from 'next';
import { Configuration, OpenAIApi } from 'openai';

const config = new Configuration({ apiKey: process.env.OPENAI_API_KEY });
const openai = new OpenAIApi(config);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();
  const { message } = req.body;

  try {
    const response = await openai.createChatCompletion({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are GuardianChain AI Assistant. Help users understand digital memory, capsules, grief scores, DAO logic, and sovereign authorship rights.' },
        { role: 'user', content: message }
      ]
    });

    const reply = response.data.choices[0].message.content;
    res.status(200).json({ reply });
  } catch (e) {
    res.status(500).json({ error: 'AI error' });
  }
}

// ✅ Connect AI reply to /assistant.tsx UI
// update page logic to fetch response from /api/assistant
import { useState } from 'react';

export default function OnboardingChat() {
  const [messages, setMessages] = useState([{ sender: 'ai', text: 'Welcome to GuardianChain. Ask me anything about capsules, memory sovereignty, or how to get started.' }]);
  const [input, setInput] = useState('');

  const handleSubmit = async () => {
    const userMessage = { sender: 'user', text: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');

    const res = await fetch('/api/assistant', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: input })
    });
    const data = await res.json();
    const aiMessage = { sender: 'ai', text: data.reply || 'Sorry, try again.' };
    setMessages((prev) => [...prev, aiMessage]);
  };

  return (
    <div className="max-w-3xl mx-auto p-10">
      <h1 className="text-2xl font-bold mb-4">🧠 Guardian Assistant</h1>
      <div className="bg-slate-900 p-6 rounded-xl space-y-4 h-[400px] overflow-y-auto">
        {messages.map((m, i) => (
          <div key={i} className={`text-sm ${m.sender === 'ai' ? 'text-cyan-400' : 'text-white'}`}>{m.sender === 'ai' ? '🤖' : '🧑'} {m.text}</div>
        ))}
      </div>
      <div className="mt-6 flex gap-2">
        <input value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask the Guardian AI..." className="flex-1 p-3 bg-slate-800 text-white rounded-xl" />
        <button onClick={handleSubmit} className="bg-primary text-black px-4 py-2 rounded-xl">Send</button>
      </div>
    </div>
  );
}

// ✅ Hook MDX Capsule Storage to Supabase
// lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

// pages/api/editor.ts (replace fs.writeFile with Supabase insert)
import { supabase } from '@/lib/supabase';

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();
  const { id, content } = req.body;

  const { error } = await supabase.from('capsules').upsert({ id, content });
  if (error) return res.status(500).json({ error: error.message });

  res.status(200).json({ success: true });
}

// ⚠️ Supabase Table Required:
// Table: "capsules"
// Columns: id (text, PK), content (text)
