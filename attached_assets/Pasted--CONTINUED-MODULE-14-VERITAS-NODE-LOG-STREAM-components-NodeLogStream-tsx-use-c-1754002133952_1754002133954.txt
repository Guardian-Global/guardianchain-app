// === CONTINUED: MODULE 14 – VERITAS NODE LOG STREAM ===

// components/NodeLogStream.tsx
"use client";
import { useEffect, useState } from 'react';

export default function NodeLogStream() {
  const [logs, setLogs] = useState([]);
  useEffect(() => {
    const eventSource = new EventSource('/api/logs/stream');
    eventSource.onmessage = (event) => {
      const parsed = JSON.parse(event.data);
      setLogs((prev) => [parsed, ...prev.slice(0, 99)]);
    };
    return () => eventSource.close();
  }, []);

  return (
    <div className="p-4 bg-black text-green-400 font-mono h-[300px] overflow-y-scroll rounded">
      <h2 className="text-lg text-white mb-2">Veritas Node Log</h2>
      <ul className="text-xs space-y-1">
        {logs.map((log, i) => (
          <li key={i}>{log.timestamp} – {log.event}</li>
        ))}
      </ul>
    </div>
  );
}


// === MODULE 15 – CAPSULE REPLAY JOURNAL ===

// components/ReplayJournal.tsx
export default function ReplayJournal({ entries }) {
  return (
    <div className="p-4 border rounded-lg shadow bg-white">
      <h3 className="text-xl font-bold mb-3">Replay History</h3>
      <ul className="space-y-2 text-sm">
        {entries.map((e, i) => (
          <li key={i} className="border-b pb-2">
            <p><strong>{e.user}</strong> replayed capsule <strong>{e.capsuleId}</strong></p>
            <p className="text-gray-500">{new Date(e.timestamp).toLocaleString()}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}


// === MODULE 16 – AI HALLUCINATION GUARD (Stub Logic) ===

// lib/ai/HallucinationGuard.ts
export async function verifyWithTruthShield(inputText) {
  const res = await fetch('https://api.truthshield.ai/verify', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${process.env.TRUTHSHIELD_API_KEY}`,
    },
    body: JSON.stringify({ text: inputText })
  });
  const data = await res.json();
  return data;
}

// Usage in capsule upload step:
const result = await verifyWithTruthShield(form.text);
if (!result.valid) throw new Error('⚠️ AI validation failed. Please revise your text.');


// ✅ MODULE STATUS
// - Node log stream via EventSource ready
// - Replay journal displays public audit trail
// - TruthShield API integrated for hallucination defense
// GuardianChain is now equipped for trusted replay & real-time memory proof.
