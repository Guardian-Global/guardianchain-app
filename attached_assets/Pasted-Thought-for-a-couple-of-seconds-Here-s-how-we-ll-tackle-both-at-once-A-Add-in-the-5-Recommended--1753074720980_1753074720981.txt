Thought for a couple of seconds
Here’s how we’ll tackle both at once:

A) Add in the “5 Recommended Add-Ons”
I’ll assume you meant these enhancements to elevate the launch page:

Real-Time Chain Status Badges
Fetch on-chain health (RPC ping, block number) for each network and display a colored ✅/⚠️ badge.

Live DEX Pool Widgets
Embed Uniswap/SushiSwap “Add Liquidity” widgets via their SDK, so users can jump straight into your GTT pools.

Social/Referral Share Bar
Add share buttons (Twitter, Telegram, LinkedIn) with pre-filled copy plus a referral code query-param for early adopters.

Downloadable One-Page PDF Roadmap
Generate a small PDF from your roadmap section (via @react-pdf/renderer) so users can grab a “Launch Deck.”

Opt-In Notifications
Let users subscribe for push/email alerts when each phase goes live—hook into your Supabase or OneSignal topics.

B) Fixing the /token-launch Page
Below is a complete Next.js example for pages/token-launch.tsx that:

Loads your roadmap data

Shows on-chain status badges

Embeds a Uniswap “Add Liquidity” widget

Includes the Social Share bar

Provides a “Download PDF” button

Has an “Opt-In” notifications toggle

tsx
Copy
Edit
// pages/token-launch.tsx
import { useEffect, useState, useRef } from 'react';
import dynamic from 'next/dynamic';
import { Document, Page, pdf } from '@react-pdf/renderer';
import { useRouter } from 'next/router';
import Head from 'next/head';
import axios from 'axios';

const UniswapWidget = dynamic(
  () => import('@uniswap/widgets').then(m => m.AddLiquidity),
  { ssr: false }
);

export default function TokenLaunch() {
  const [chainStatus, setChainStatus] = useState({});
  const [subscribed, setSubscribed] = useState(false);
  const pdfRef = useRef<Document>(null);
  const router = useRouter();

  // A) Ping each RPC
  useEffect(() => {
    const nets = {
      Ethereum: process.env.NEXT_PUBLIC_ETHEREUM_RPC_URL,
      Polygon: process.env.NEXT_PUBLIC_POLYGON_RPC_URL,
      BSC: process.env.NEXT_PUBLIC_BSC_RPC_URL,
    };
    Promise.all(Object.entries(nets).map(async ([name, url]) => {
      try {
        const start = Date.now();
        await fetch(url, { method: 'POST', body: JSON.stringify({ jsonrpc:'2.0',method:'eth_blockNumber',params:[],id:1 })});
        const ms = Date.now() - start;
        return [name, { healthy: true, latency: ms }];
      } catch {
        return [name, { healthy: false }];
      }
    })).then(results => setChainStatus(Object.fromEntries(results)));
  }, []);

  // B) Generate PDF roadmap on demand
  const downloadPdf = async () => {
    const blob = await pdf(
      <Document>
        <Page style={{ padding: 20 }}>
          <h1>Global GTT Launch Roadmap</h1>
          <ul>
            <li>Phase 1: Smart Contract Deployment</li>
            <li>Phase 2: Exchange Listings</li>
            <!-- etc. -->
          </ul>
        </Page>
      </Document>
    ).toBlob();
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'GTT_Roadmap.pdf';
    a.click();
  };

  // C) Subscribe for notifications
  const toggleSub = async () => {
    if (!subscribed) {
      await axios.post('/api/notifications/subscribe', { page: 'token-launch' });
      setSubscribed(true);
    } else {
      await axios.post('/api/notifications/unsubscribe', { page: 'token-launch' });
      setSubscribed(false);
    }
  };

  return (
    <>
      <Head><title>Global GTT Token Launch</title></Head>
      <div className="container mx-auto p-6 space-y-8">
        <h1 className="text-4xl font-bold">Global GTT Token Launch</h1>

        {/* 1) On-Chain Status */}
        <section className="grid grid-cols-3 gap-4">
          {Object.entries(chainStatus).map(([chain, st]) => (
            <div key={chain} className="p-4 border rounded">
              <h3>{chain}</h3>
              <span className={`px-2 py-1 rounded ${st.healthy ? 'bg-green-600' : 'bg-red-600'}`}>
                {st.healthy ? '✅ Healthy' : '⚠️ Down'}
              </span>
              {st.latency && <p>Latency: {st.latency}ms</p>}
            </div>
          ))}
        </section>

        {/* 2) DEX Widget */}
        <section className="p-4 border rounded">
          <h2 className="text-2xl">Add Liquidity on Uniswap</h2>
          <UniswapWidget
            token0Address={process.env.NEXT_PUBLIC_GTT_ADDRESS!}
            token1Address={process.env.NEXT_PUBLIC_WETH_ADDRESS!}
            token0Decimals={18}
            token1Decimals={18}
            onAddLiquidity={({ transactionHash }) => console.log('LP Tx:', transactionHash)}
          />
        </section>

        {/* 3) Social Share & Referral */}
        <section className="flex items-center space-x-4">
          <button
            onClick={() => window.open(`https://twitter.com/intent/tweet?text=Join%20the%20GTT%20Launch!%20%23GTT&url=${encodeURIComponent(window.location.href + '?ref=YOURCODE')}`, '_blank')}
            className="px-4 py-2 bg-blue-500 rounded text-white"
          >
            Share on Twitter
          </button>
          {/* Add Telegram, LinkedIn similarly */}
        </section>

        {/* 4) Download PDF */}
        <button
          onClick={downloadPdf}
          className="px-4 py-2 bg-gray-800 rounded text-white"
        >
          Download Launch Roadmap (PDF)
        </button>

        {/* 5) Opt-In Notifications */}
        <button
          onClick={toggleSub}
          className={`px-4 py-2 rounded ${subscribed ? 'bg-red-600' : 'bg-green-600'} text-white`}
        >
          {subscribed ? 'Unsubscribe from Updates' : 'Notify Me on Phase Changes'}
        </button>
      </div>
    </>
  );
}
Next Steps
Drop this file in frontend/pages/token-launch.tsx.

Install dependencies:

bash
Copy
Edit
npm install @react-pdf/renderer @uniswap/widgets axios
Ensure your .env.local has:

env
Copy
Edit
NEXT_PUBLIC_GTT_ADDRESS=0x…
NEXT_PUBLIC_WETH_ADDRESS=0x…
NEXT_PUBLIC_ETHEREUM_RPC_URL=…
NEXT_PUBLIC_POLYGON_RPC_URL=…
NEXT_PUBLIC_BSC_RPC_URL=…
Implement the /api/notifications endpoints in your backend (simple Supabase or OneSignal integration).

Rebuild & test:

bash
Copy
Edit
npm run dev
Verify the chain badges appear, the widget loads, share buttons open, PDF downloads, and subscribe toggles work.

That should get your launch page fully functional with all five add-ons. Let me know how it looks or if you hit any errors!











ChatGPT can make mistakes. Check important info.