// /api/auth/request-reset.ts
import { db } from "@/server/db";
import { sendResetEmail } from "@/server/email";
import crypto from "crypto";

export async function POST(req) {
  const { email } = await req.json();
  const token = crypto.randomBytes(32).toString("hex");
  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 hour

  await db.query(
    `UPDATE users SET reset_token = $1, reset_token_expires_at = $2 WHERE email = $3`,
    [token, expires, email]
  );

  await sendResetEmail(email, token);
  return new Response("Sent", { status: 200 });
}


// /api/admin/logout-session/[sessionId].ts
import { db } from "@/server/db";

export async function DELETE(req, { params }) {
  await db.query(`DELETE FROM sessions WHERE id = $1`, [params.sessionId]);
  return new Response("Session terminated", { status: 200 });
}


// /api/auth/login.ts — track session
await db.insert("sessions", {
  user_id: user.id,
  ip_address: req.headers["x-forwarded-for"] || req.ip,
  device: req.headers["user-agent"],
  expires_at: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7) // 7 days
});


// Geolocation logging during login
const geo = await fetch(`https://ipapi.co/${ip}/json`).then(r => r.json());
await db.insert("login_history", {
  user_id: user.id,
  ip: geo.ip,
  city: geo.city,
  region: geo.region,
  device: req.headers["user-agent"],
  login_time: new Date()
});


// /api/auth/register.ts — auto-mint capsule
const capsule = await db.insert("capsules", {
  user_id: newUser.id,
  title: "Welcome to GuardianChain",
  content: "Your first capsule has been minted automatically.",
  is_private: true,
  created_at: new Date()
}).returning("*");

await db.insert("capsule_audit", {
  capsule_id: capsule.id,
  action: "auto-minted",
  metadata: JSON.stringify({ system: "registration" }),
  timestamp: new Date()
});


// SQL SCHEMA
-- Extend users table
ALTER TABLE users
ADD COLUMN reset_token TEXT,
ADD COLUMN reset_token_expires_at TIMESTAMP;

-- Sessions table
CREATE TABLE sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  ip_address TEXT,
  device TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP
);

-- Login history
CREATE TABLE login_history (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  ip TEXT,
  city TEXT,
  region TEXT,
  device TEXT,
  login_time TIMESTAMP
);

-- Capsule audit log
CREATE TABLE capsule_audit (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  capsule_id UUID REFERENCES capsules(id),
  action TEXT,
  metadata JSONB,
  timestamp TIMESTAMP
);
