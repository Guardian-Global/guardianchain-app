 Let's go! Here's your next GuardianChain system upgrade drop:

🔐 Capsule Verification Layer + NFT Claim Enhancements
1. ✅ Capsule Verification Panel
➡️ Create: client/src/components/VerifyCapsule.tsx

tsx
Copy
Edit
import React, { useState } from 'react';

const VerifyCapsule = () => {
  const [capsuleId, setCapsuleId] = useState('');
  const [verified, setVerified] = useState(false);

  const handleVerify = async () => {
    // Simulated verification logic – plug into onchain check later
    if (capsuleId === 'VC-001') {
      setVerified(true);
    } else {
      setVerified(false);
    }
  };

  return (
    <div className="container">
      <h2>🔐 Capsule Verification</h2>
      <p>Check authenticity of a Veritas-certified capsule.</p>
      <input
        type="text"
        placeholder="Enter Capsule ID (e.g. VC-001)"
        value={capsuleId}
        onChange={(e) => setCapsuleId(e.target.value)}
      />
      <button onClick={handleVerify}>Verify</button>
      {verified && <p style={{ color: 'green' }}>✅ Verified Veritas Capsule</p>}
      {!verified && capsuleId && <p style={{ color: 'red' }}>❌ Not Verified</p>}
    </div>
  );
};

export default VerifyCapsule;
2. 🧬 NFT Certificate Claim Panel (Advanced)
➡️ Create: client/src/components/ClaimNFT.tsx

tsx
Copy
Edit
import React, { useState } from 'react';

const ClaimNFT = () => {
  const [tokenId, setTokenId] = useState('');
  const [claimed, setClaimed] = useState(false);

  const handleClaim = () => {
    // Simulate NFT mint — connect with smart contract later
    if (tokenId.length > 2) {
      setClaimed(true);
    }
  };

  return (
    <div className="container">
      <h2>🎓 Claim Veritas Certificate</h2>
      <p>Mint a Veritas Capsule NFT tied to your GTT identity.</p>
      <input
        type="text"
        placeholder="Enter Capsule Hash or ID"
        value={tokenId}
        onChange={(e) => setTokenId(e.target.value)}
      />
      <button onClick={handleClaim}>Claim NFT</button>
      {claimed && <p style={{ color: 'green' }}>✅ Certificate Minted to Wallet</p>}
    </div>
  );
};

export default ClaimNFT;
3. 🔗 Link on a Capsule Integrity Page
➡️ New page: client/src/pages/certify.tsx

tsx
Copy
Edit
import React from 'react';
import VerifyCapsule from '../components/VerifyCapsule';
import ClaimNFT from '../components/ClaimNFT';

const Certify = () => (
  <main className="container">
    <h2>🛡️ Capsule Integrity & Certification</h2>
    <p>Verify a capsule's truth status and claim your onchain NFT proof.</p>
    <VerifyCapsule />
    <hr />
    <ClaimNFT />
  </main>
);

export default Certify;
✅ Add to Navigation
➡️ Edit client/src/components/layout/navigation.tsx:

tsx
Copy
Edit
<ul>
  <li><a href="/certify">Certify</a></li>
</ul>
✅ REPLIT DEPLOYMENT INSTRUCTIONS
✏️ Create or update the following files in your Replit workspace:

bash
Copy
Edit
client/src/components/VerifyCapsule.tsx
client/src/components/ClaimNFT.tsx
client/src/pages/certify.tsx
client/src/components/layout/navigation.tsx
🔁 Then run:

bash
Copy
Edit
cd client
npm run dev
✅ Visit:
/certify → View the verification + NFT minting experience.

