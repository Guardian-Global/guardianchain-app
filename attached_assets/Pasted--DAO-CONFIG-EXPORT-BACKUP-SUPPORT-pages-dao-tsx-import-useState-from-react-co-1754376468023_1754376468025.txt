// ✅ DAO CONFIG — EXPORT + BACKUP SUPPORT
// pages/dao.tsx
import { useState } from 'react';

const initialConfig = {
  voteQuorum: 66,
  payoutSplit: {
    authors: 60,
    witnesses: 10,
    treasury: 30
  },
  maxCapsuleSizeMB: 500,
  emergencyUnlockThreshold: 3
};

export default function DAODashboard() {
  const [config, setConfig] = useState(initialConfig);

  const updateValue = (path, value) => {
    const keys = path.split('.');
    const newConfig = { ...config };
    let obj = newConfig;
    while (keys.length > 1) obj = obj[keys.shift()];
    obj[keys[0]] = value;
    setConfig({ ...newConfig });
  };

  const exportConfig = () => {
    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'guardian-dao-config.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  const importConfig = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const text = await file.text();
    const imported = JSON.parse(text);
    setConfig(imported);
  };

  return (
    <div className="max-w-5xl mx-auto p-10">
      <h1 className="text-3xl font-bold mb-4">🗳 DAO Configuration Dashboard</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <label className="block">
          <span className="text-slate-300">Vote Quorum (%)</span>
          <input
            type="number"
            value={config.voteQuorum}
            onChange={(e) => updateValue('voteQuorum', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
        <label className="block">
          <span className="text-slate-300">Max Capsule Size (MB)</span>
          <input
            type="number"
            value={config.maxCapsuleSizeMB}
            onChange={(e) => updateValue('maxCapsuleSizeMB', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
        <label className="block">
          <span className="text-slate-300">Emergency Unlock Threshold</span>
          <input
            type="number"
            value={config.emergencyUnlockThreshold}
            onChange={(e) => updateValue('emergencyUnlockThreshold', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
        <label className="block">
          <span className="text-slate-300">Author Split (%)</span>
          <input
            type="number"
            value={config.payoutSplit.authors}
            onChange={(e) => updateValue('payoutSplit.authors', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
        <label className="block">
          <span className="text-slate-300">Witness Split (%)</span>
          <input
            type="number"
            value={config.payoutSplit.witnesses}
            onChange={(e) => updateValue('payoutSplit.witnesses', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
        <label className="block">
          <span className="text-slate-300">Treasury Split (%)</span>
          <input
            type="number"
            value={config.payoutSplit.treasury}
            onChange={(e) => updateValue('payoutSplit.treasury', parseInt(e.target.value))}
            className="mt-1 w-full rounded bg-slate-900 border border-slate-700 text-white px-4 py-2"
          />
        </label>
      </div>
      <div className="flex gap-4 items-center">
        <button onClick={exportConfig} className="bg-primary text-black px-6 py-2 rounded hover:bg-highlight">
          ⬇️ Export Config
        </button>
        <label className="bg-slate-800 text-white px-4 py-2 rounded cursor-pointer">
          ⬆️ Import Config
          <input type="file" accept=".json" onChange={importConfig} className="hidden" />
        </label>
      </div>
    </div>
  );
}

// ✅ AI Onboarding Chat — pages/assistant.tsx
import { useState } from 'react';

export default function OnboardingChat() {
  const [messages, setMessages] = useState([{ sender: 'ai', text: 'Welcome to GuardianChain. Ask me anything about capsules, memory sovereignty, or how to get started.' }]);
  const [input, setInput] = useState('');

  const handleSubmit = () => {
    const userMessage = { sender: 'user', text: input };
    const aiResponse = { sender: 'ai', text: `You asked: “${input}”\n→ Sovereign memory starts by minting your first capsule. Would you like to record now?` };
    setMessages([...messages, userMessage, aiResponse]);
    setInput('');
  };

  return (
    <div className="max-w-3xl mx-auto p-10">
      <h1 className="text-2xl font-bold mb-4">🧠 Guardian Assistant</h1>
      <div className="bg-slate-900 p-6 rounded-xl space-y-4 h-[400px] overflow-y-auto">
        {messages.map((m, i) => (
          <div key={i} className={`text-sm ${m.sender === 'ai' ? 'text-cyan-400' : 'text-white'}`}>{m.sender === 'ai' ? '🤖' : '🧑'} {m.text}</div>
        ))}
      </div>
      <div className="mt-6 flex gap-2">
        <input value={input} onChange={(e) => setInput(e.target.value)} placeholder="Ask the Guardian AI..." className="flex-1 p-3 bg-slate-800 text-white rounded-xl" />
        <button onClick={handleSubmit} className="bg-primary text-black px-4 py-2 rounded-xl">Send</button>
      </div>
    </div>
  );
}
