// pages/capsules/new.tsx
import { useState } from "react";
import { useRouter } from "next/router";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { encryptCapsule } from "@/utils/lit/encryptCapsule";

export default function NewCapsulePage() {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [tags, setTags] = useState("");
  const [isPrivate, setIsPrivate] = useState(false);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!title.trim()) return setError("Title is required.");
    setError("");
    setLoading(true);

    try {
      const accessControlConditions = isPrivate
        ? [
            {
              contractAddress: "",
              standardContractType: "",
              chain: "polygon",
              method: "eth_getBalance",
              parameters: [":userAddress"],
              returnValueTest: {
                comparator: ">",
                value: "0"
              }
            }
          ]
        : [
            {
              conditionType: "evmBasic",
              contractAddress: "",
              standardContractType: "",
              chain: "polygon",
              method: "eth_getBalance",
              parameters: [":userAddress"],
              returnValueTest: {
                comparator: ">=",
                value: "0"
              }
            }
          ];

      const encrypted = await encryptCapsule({
        content: description.trim(),
        accessControlConditions,
      });

      const res = await fetch("/api/capsules/new", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: title.trim(),
          description: encrypted.encryptedContent,
          tags: tags.split(",").map((t) => t.trim()).filter(Boolean),
          encryptedSymmetricKey: encrypted.encryptedSymmetricKey,
          accessControlConditions: encrypted.accessControlConditions,
          isPrivate,
        }),
      });

      const json = await res.json();
      setLoading(false);
      if (json.id) router.push(`/capsule/${json.id}`);
      else setError(json.error || "Unknown error occurred.");
    } catch (err) {
      setError("Encryption or server error. Try again later.");
      setLoading(false);
    }
  };

  return (
    <main className="min-h-screen bg-slate-900 text-white px-6 py-16">
      <Card className="bg-slate-800 p-8 max-w-2xl mx-auto">
        <h1 className="text-3xl font-extrabold mb-6 text-center">ðŸ“¦ Create a Truth Capsule</h1>
        <p className="text-slate-400 mb-8 text-center">
          Your truth deserves a sovereign vault. Fill out the details below to mint a new capsule.
        </p>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block mb-1 text-sm text-slate-300">Title *</label>
            <Input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter your capsule title"
              className="bg-slate-700 text-white"
              required
            />
          </div>

          <div>
            <label className="block mb-1 text-sm text-slate-300">Description</label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="This memory, message or moment..."
              rows={5}
              className="bg-slate-700 text-white"
            />
          </div>

          <div>
            <label className="block mb-1 text-sm text-slate-300">Tags</label>
            <Input
              value={tags}
              onChange={(e) => setTags(e.target.value)}
              placeholder="Comma-separated tags (e.g. truth, legacy, grief)"
              className="bg-slate-700 text-white"
            />
          </div>

          <div className="flex items-center gap-2">
            <Checkbox id="privateVault" checked={isPrivate} onCheckedChange={() => setIsPrivate(!isPrivate)} />
            <label htmlFor="privateVault" className="text-sm text-slate-300">
              Private Vault (only you can unlock this capsule)
            </label>
          </div>

          {error && <p className="text-red-500 text-sm font-medium">{error}</p>}

          <Button type="submit" disabled={loading} className="w-full text-lg">
            {loading ? "Encrypting + Minting..." : "Mint Capsule Now"}
          </Button>
        </form>
      </Card>
    </main>
  );
}