 FILE 1: /src/pages/private.tsx
This is the private capsule reel (friends-only feed).

tsx
Copy
Edit
// /src/pages/private.tsx

import React from "react";
import Capsule from "../components/Capsule";
import { getPrivateCapsules } from "../lib/friendSystem";

export default function PrivateFeed() {
  const capsules = getPrivateCapsules("currentUserId"); // Replace with actual auth

  return (
    <div className="px-6 py-12 max-w-6xl mx-auto space-y-10">
      <h1 className="text-3xl font-bold text-center text-gray-800">
        Private Capsule Feed
      </h1>
      <p className="text-center text-sm text-gray-500 mb-8">
        Only capsules from friends you've accepted.
      </p>
      {capsules.map((cap) => (
        <Capsule
          key={cap.id}
          id={cap.id}
          creator={cap.creator}
          content={cap.content}
          griefScore={cap.griefScore}
          isSealed={cap.isSealed}
          onSeal={() => console.log("Seal requested", cap.id)}
          onPublish={() => console.log("Publish requested", cap.id)}
        />
      ))}
    </div>
  );
}
üî® FILE 2: /src/lib/friendSystem.ts
This mock simulates accepted friend capsule filtering.

ts
Copy
Edit
// /src/lib/friendSystem.ts

import { capsules } from "../data/capsules";

// Mock friend-based filter
export function getPrivateCapsules(userId: string) {
  const acceptedFriendUsernames = ["Leila Chen", "Nuru Makena"]; // Replace with Supabase logic
  return capsules.filter((c) => acceptedFriendUsernames.includes(c.creator));
}
üî® FILE 3: /src/api/seal.ts
This endpoint calls DocuSign API to issue a Veritas Seal.

ts
Copy
Edit
// /src/api/seal.ts

import express from "express";
import { sealWithVeritas } from "../lib/sealCapsule";

const router = express.Router();

router.post("/seal", async (req, res) => {
  const { capsuleId, content } = req.body;

  try {
    const sealId = await sealWithVeritas(capsuleId, content);
    res.status(200).json({ id: sealId });
  } catch (error) {
    console.error("Seal error:", error);
    res.status(500).json({ error: "Failed to seal capsule" });
  }
});

export default router;
üî® FILE 4: /src/components/SealModal.tsx
tsx
Copy
Edit
// /src/components/SealModal.tsx

import React, { useState } from "react";

export default function SealModal({
  capsuleId,
  onClose
}: {
  capsuleId: string;
  onClose: () => void;
}) {
  const [loading, setLoading] = useState(false);
  const [sealId, setSealId] = useState("");

  const handleSeal = async () => {
    setLoading(true);
    const res = await fetch("/api/seal", {
      method: "POST",
      body: JSON.stringify({ capsuleId }),
      headers: { "Content-Type": "application/json" }
    });
    const { id } = await res.json();
    setSealId(id);
    setLoading(false);
  };

  return (
    <div className="bg-white border shadow-lg rounded-lg p-6 max-w-md mx-auto mt-12">
      <h3 className="text-xl font-semibold">Seal Capsule</h3>
      {sealId ? (
        <p className="mt-4 text-green-600">
          ‚úÖ Sealed! Veritas ID: <span className="font-mono">{sealId}</span>
        </p>
      ) : (
        <button
          onClick={handleSeal}
          disabled={loading}
          className="bg-black text-white px-4 py-2 mt-4 rounded"
        >
          {loading ? "Sealing..." : "Seal Now"}
        </button>
      )}
      <button
        onClick={onClose}
        className="text-sm mt-6 underline text-gray-500"
      >
        Close
      </button>
    </div>
  );
}
üß† RECAP ‚Äî FILES TO SEND TO REPLIT
File	Description
/src/pages/private.tsx	Friends-only capsule feed
/src/lib/friendSystem.ts	Friend filter logic
/src/api/seal.ts	Veritas API call
/src/components/SealModal.tsx	Modal to confirm seal action

üì¶ REPLIT COMMAND TO PASTE
bash
Copy
Edit
// GUARDIANCHAIN PHASE 2 ‚Äî PRIVATE FEED + VERITAS SEAL

Create or update the following files inside FULLSTACK_JS Replit app:

1. /src/pages/private.tsx ‚Äî Friends-only capsule reel
2. /src/lib/friendSystem.ts ‚Äî Filter logic (mock now, Supabase later)
3. /src/api/seal.ts ‚Äî Express route to call sealCapsule.ts
4. /src/components/SealModal.tsx ‚Äî Veritas Seal confirmation UI

Install if not already:
npm install express body-parser cors axios
‚úÖ Let me know when these are deployed, and I will proceed to:

- /pages/dashboard.tsx (operator capsule view)
- /pages/commander.tsx (root control panel)
- GTT token + replay engine
- NFT mint API (/api/mint)

Once these are live, just say:

**‚Äú‚úîÔ∏è SEAL MODULE LIVE‚Äù**

And I‚Äôll continue immediately.