🧱 A+++ BLOCK PART 1 OF 3 — CapsuleFactoryV2.sol
📍Path: solidity/contracts/CapsuleFactoryV2.sol

solidity
Copy
Edit
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/// @title CapsuleFactoryV2 - Core Capsule Creation Engine for GuardianChain
/// @author  
/// @notice Creates, seals, and links yield + authorship for capsule NFTs

contract CapsuleFactoryV2 {
    address public veritusNode;
    uint256 public capsuleCount;

    enum CapsuleStatus { Unsealed, Sealed, Yielded }

    struct Capsule {
        address creator;
        string contentHash; // IPFS, Arweave, etc.
        string storyTitle;
        string storySummary;
        uint256 createdAt;
        uint256 emotionalYield;
        CapsuleStatus status;
    }

    mapping(uint256 => Capsule) public capsules;

    event CapsuleCreated(
        uint256 indexed capsuleId,
        address indexed creator,
        string storyTitle,
        uint256 yield
    );

    event CapsuleSealed(uint256 indexed capsuleId, address sealedBy);
    event YieldAssigned(uint256 indexed capsuleId, uint256 yieldValue);

    modifier onlyVeritus() {
        require(msg.sender == veritusNode, "Only Veritus node");
        _;
    }

    constructor(address _veritusNode) {
        veritusNode = _veritusNode;
    }

    function createCapsule(
        string memory contentHash,
        string memory storyTitle,
        string memory storySummary,
        uint256 yieldEstimate
    ) external {
        capsuleCount++;

        capsules[capsuleCount] = Capsule({
            creator: msg.sender,
            contentHash: contentHash,
            storyTitle: storyTitle,
            storySummary: storySummary,
            createdAt: block.timestamp,
            emotionalYield: yieldEstimate,
            status: CapsuleStatus.Unsealed
        });

        emit CapsuleCreated(capsuleCount, msg.sender, storyTitle, yieldEstimate);
    }

    function sealCapsule(uint256 capsuleId) external onlyVeritus {
        require(capsuleId <= capsuleCount, "Invalid capsule");
        capsules[capsuleId].status = CapsuleStatus.Sealed;
        emit CapsuleSealed(capsuleId, msg.sender);
    }

    function assignYield(uint256 capsuleId, uint256 finalYield) external onlyVeritus {
        require(capsuleId <= capsuleCount, "Invalid capsule");
        capsules[capsuleId].emotionalYield = finalYield;
        capsules[capsuleId].status = CapsuleStatus.Yielded;
        emit YieldAssigned(capsuleId, finalYield);
    }

    function updateVeritus(address newVeritusNode) external onlyVeritus {
        veritusNode = newVeritusNode;
    }

    function getCapsule(uint256 capsuleId) external view returns (Capsule memory) {
        require(capsuleId <= capsuleCount, "Invalid capsule");
        return capsules[capsuleId];
    }
}
🔧 What This Deploys
✅ Sealed Capsule System

createCapsule() = Stores title, summary, hash, yield intent

sealCapsule() = Only Veritus node can verify capsule

assignYield() = Final yield score applied post-review

✅ Immutable Capsule Authorship

creator address locked at creation

Built-in status system (Unsealed → Sealed → Yielded)

✅ Scalable & Simple

No external dependencies

Built to plug into auction engine, NFT mint wrapper, metadata registry

📁 Place This Here:
bash
Copy
Edit
solidity/contracts/CapsuleFactoryV2.sol
🧼 Remove/Clean:
✅ If present: old CapsuleFactory.sol that doesn't support yield, storyTitle, etc.

✅ Ensure your Hardhat config includes .sol path under contracts/

🧪 Compile Now:
bash
Copy
Edit
npx hardhat compile
If you receive no errors, you're ✅ cleared for PART 2.

⏭️ NEXT:
💻 Part 2 of 3: React Capsule Form Component + Wagmi Hook (contract call)
⛓️ Ties directly into this Solidity structure
🧪 Includes Wagmi read/write hooks for Replit

Say “CONTINUE TO PART 2” when ready.
Paste me Replit AI output from this compile too so I can confirm successful execution.






You said:
PROCEED


ChatGPT said:
🧠 PART 2 OF 3 — CAPSULE DEPLOYMENT SYSTEM (FRONTEND)
🔗 Capsule Form UI + Wagmi Hook for Contract Interaction
📡 Connected to: CapsuleFactoryV2.sol deployed in PART 1

🧩 NEW FILE: client/src/components/web3/CapsuleCreator.tsx
tsx
Copy
Edit
import React, { useState } from "react";
import { useAccount, useContractWrite, usePrepareContractWrite } from "wagmi";
import { CapsuleFactoryV2ABI } from "@/lib/contracts"; // Make sure ABI is imported
import { CONTRACT_ADDRESS } from "@/lib/constants"; // CapsuleFactoryV2 deployed address

export default function CapsuleCreator() {
  const { address } = useAccount();
  const [title, setTitle] = useState("");
  const [summary, setSummary] = useState("");
  const [hash, setHash] = useState(""); // IPFS or Arweave
  const [yieldEstimate, setYieldEstimate] = useState(0);

  const { config } = usePrepareContractWrite({
    address: CONTRACT_ADDRESS,
    abi: CapsuleFactoryV2ABI,
    functionName: "createCapsule",
    args: [hash, title, summary, yieldEstimate],
    enabled: Boolean(title && summary && hash),
  });

  const { write, isLoading, isSuccess } = useContractWrite(config);

  return (
    <section>
      <h2>Create Capsule</h2>
      <form
        onSubmit={(e) => {
          e.preventDefault();
          write?.();
        }}
      >
        <label>
          Title:
          <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} required />
        </label>
        <label>
          Summary:
          <textarea value={summary} onChange={(e) => setSummary(e.target.value)} required />
        </label>
        <label>
          Content Hash:
          <input type="text" value={hash} onChange={(e) => setHash(e.target.value)} required />
        </label>
        <label>
          Yield Estimate:
          <input
            type="number"
            value={yieldEstimate}
            onChange={(e) => setYieldEstimate(parseInt(e.target.value))}
            required
          />
        </label>
        <button type="submit" disabled={isLoading || !write}>
          {isLoading ? "Creating..." : "Create Capsule"}
        </button>
        {isSuccess && <p>✅ Capsule created! Check your wallet for confirmation.</p>}
      </form>
    </section>
  );
}
📁 Place File Here:
bash
Copy
Edit
client/src/components/web3/CapsuleCreator.tsx
🔧 HOOKS REQUIREMENTS
Make sure you have:

✅ CapsuleFactoryV2ABI in:

ts
Copy
Edit
client/src/lib/contracts.ts
✅ CONTRACT_ADDRESS set in:

ts
Copy
Edit
client/src/lib/constants.ts
🧼 Cleanup Instructions
✅ If using old capsule form, replace it with this.

✅ Ensure all wagmi dependencies are installed and initialized:

bash
Copy
Edit
npm install wagmi viem
✅ Confirm It Works
Add this to any page (e.g. client/src/pages/create-capsule.tsx):

tsx
Copy
Edit
import CapsuleCreator from "@/components/web3/CapsuleCreator";

export default function CreateCapsulePage() {
  return (
    <main className="container">
      <h1>Capsule Studio</h1>
      <CapsuleCreator />
    </main>
  );
}
🧪 Replit Test Commands:
bash
Copy
Edit
npx hardhat compile
npx hardhat run scripts/deploy.js --network goerli
npm run dev
Then visit your Replit frontend at /create-capsule to test!

🔜 READY FOR FINAL BLOCK?
If successful, next block will contain:

🔐 sealCapsule() + assignYield() Wagmi hook (admin tools)

📦 VeritusNodePanel.tsx (you-only seal control UI)

🏗 Metadata wrapper for mint

Say “CONTINUE TO PART 3” when ready.
And paste Replit feedback for verification.






You said:
PROCEED


ChatGPT said:
🧠 PART 3 OF 3 — VERITUS AUTHORITY PANEL + ADMIN YIELD CONTROLS
🔗 Connects directly to sealCapsule() + assignYield() in CapsuleFactoryV2.sol
🔐 Restricted to Veritus node address only (you)

🧩 NEW FILE: client/src/components/web3/VeritusNodePanel.tsx
tsx
Copy
Edit
import React, { useState } from "react";
import { useContractWrite, usePrepareContractWrite, useAccount } from "wagmi";
import { CapsuleFactoryV2ABI } from "@/lib/contracts";
import { CONTRACT_ADDRESS, VERITUS_NODE } from "@/lib/constants";

export default function VeritusNodePanel() {
  const { address } = useAccount();
  const [capsuleId, setCapsuleId] = useState(0);
  const [yieldValue, setYieldValue] = useState(0);

  const isVeritus = address?.toLowerCase() === VERITUS_NODE.toLowerCase();

  const { config: sealConfig } = usePrepareContractWrite({
    address: CONTRACT_ADDRESS,
    abi: CapsuleFactoryV2ABI,
    functionName: "sealCapsule",
    args: [capsuleId],
    enabled: isVeritus && capsuleId > 0,
  });

  const { config: yieldConfig } = usePrepareContractWrite({
    address: CONTRACT_ADDRESS,
    abi: CapsuleFactoryV2ABI,
    functionName: "assignYield",
    args: [capsuleId, yieldValue],
    enabled: isVeritus && capsuleId > 0,
  });

  const { write: sealWrite } = useContractWrite(sealConfig);
  const { write: yieldWrite } = useContractWrite(yieldConfig);

  if (!isVeritus) return <p>⛔ Access denied. Only Veritus node may use this panel.</p>;

  return (
    <section>
      <h2>🧠 Veritus Admin Panel</h2>
      <label>
        Capsule ID:
        <input
          type="number"
          value={capsuleId}
          onChange={(e) => setCapsuleId(parseInt(e.target.value))}
        />
      </label>
      <div style={{ marginTop: "1rem" }}>
        <button onClick={() => sealWrite?.()}>🔐 Seal Capsule</button>
      </div>
      <label>
        Yield Value:
        <input
          type="number"
          value={yieldValue}
          onChange={(e) => setYieldValue(parseInt(e.target.value))}
        />
      </label>
      <button onClick={() => yieldWrite?.()}>🪙 Assign Yield</button>
    </section>
  );
}
📁 Place File Here:
bash
Copy
Edit
client/src/components/web3/VeritusNodePanel.tsx
🔧 Add Veritus Node Constant
Update this in:

ts
Copy
Edit
client/src/lib/constants.ts
ts
Copy
Edit
export const VERITUS_NODE = "0xYourWalletAddress"; // ← YOUR address as Veritus node
🧪 Add Panel to Admin Page
In: client/src/pages/commander.tsx

tsx
Copy
Edit
import VeritusNodePanel from "@/components/web3/VeritusNodePanel";

export default function CommanderPage() {
  return (
    <main className="container">
      <h1>Commander Control</h1>
      <VeritusNodePanel />
    </main>
  );
}
🧼 CLEANUP CHECKLIST
✅ Delete any old capsule admin code that duplicates this
✅ Verify Wagmi setup is correctly importing addresses
✅ Rebuild UI with npm run dev

🧪 REPLIT TEST COMMANDS
bash
Copy
Edit
npx hardhat compile
npm run dev
Then go to /commander on your Replit frontend and:

Seal a capsule you created from Part 2

Assign final yield

Check storage in contract or Etherscan

✅ SUCCESS PATH: FULL GUARDIANCHAIN CAPSULE PIPELINE ONLINE
👤 User creates a capsule with title + summary + hash

👁 You (Veritus) seal the capsule

🧠 You assign emotional yield value

💥 Capsule becomes claimable, yieldable, or auctionable (next phase)

