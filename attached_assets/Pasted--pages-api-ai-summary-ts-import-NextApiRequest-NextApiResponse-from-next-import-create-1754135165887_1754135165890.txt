// pages/api/ai-summary.ts
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { content, capsule_id } = req.body;

  const summaryPrompt = `Summarize the following memory as 1 sentence and classify the primary emotion (joy, sadness, fear, anger, nostalgia, hope, grief):\n\n"${content}"`;

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [{ role: "user", content: summaryPrompt }],
      max_tokens: 100
    })
  });

  const json = await response.json();
  const output = json.choices[0].message.content;

  await supabase.from("capsules").update({ summary: output }).eq("id", capsule_id);

  res.status(200).json({ summary: output });
}


// pages/api/roi.ts
import { NextApiRequest, NextApiResponse } from "next";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const capsuleId = req.query.id as string;

  const { data, error } = await supabase
    .from("replay_logs")
    .select("*", { count: "exact", head: true })
    .eq("capsule_id", capsuleId);

  if (error) return res.status(500).json({ error });

  const gttEarned = data.count * 10; // 10 GTT per replay
  res.status(200).json({ capsuleId, replays: data.count, gttEarned });
}


// Sidebar.tsx addition (restore full nav)
const fullRoutes = [
  ...routes,
  { name: "Replay Capsule", href: "/replay", roles: ["guest", "member", "admin"] },
  { name: "Analytics", href: "/analytics", roles: ["admin"] },
  { name: "Moderation Logs", href: "/moderation", roles: ["admin"] },
  { name: "Mint Capsule", href: "/mint", roles: ["member", "admin"] },
];

// Replace in render map: routes â†’ fullRoutes
