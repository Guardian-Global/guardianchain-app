2025-07-30 19:06:57.05
901308a1
User
line: '617',
2025-07-30 19:06:57.05
901308a1
User
routine: 'pg_strtoint32_safe',
2025-07-30 19:06:57.05
901308a1
User
sourceError: undefined
2025-07-30 19:06:57.05
901308a1
User
}
2025-07-30 19:06:57.05
901308a1
User
Capsule fetch error: NeonDbError: invalid input syntax for type integer: "NaN"
2025-07-30 19:06:57.05
901308a1
User
at execute (file:///home/runner/workspace/node_modules/@neondatabase/serverless/index.mjs:1556:55)
2025-07-30 19:06:57.05
901308a1
User
at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
2025-07-30 19:06:57.05
901308a1
User
at async NeonHttpPreparedQuery.execute (file:///home/runner/workspace/node_modules/drizzle-orm/neon-http/session.js:40:20)
2025-07-30 19:06:57.05
901308a1
User
at async file:///home/runner/workspace/dist/index.js:5543:23 {
2025-07-30 19:06:57.05
901308a1
User
severity: 'ERROR',
2025-07-30 19:06:57.05
901308a1
User
code: '22P02',
2025-07-30 19:06:57.05
901308a1
User
detail: undefined,
2025-07-30 19:06:57.05
901308a1
User
hint: undefined,
2025-07-30 19:06:57.05
901308a1
User
position: undefined,
2025-07-30 19:06:57.05
901308a1
User
internalPosition: undefined,
2025-07-30 19:06:57.05
901308a1
User
internalQuery: undefined,
2025-07-30 19:06:57.05
901308a1
User
where: "unnamed portal parameter $1 = '...'",
2025-07-30 19:06:57.05
901308a1
User
schema: undefined,
2025-07-30 19:06:57.05
901308a1
User
table: undefined,
2025-07-30 19:06:57.05
901308a1
User
column: undefined,
2025-07-30 19:06:57.05
901308a1
User
dataType: undefined,
2025-07-30 19:06:57.05
901308a1
User
constraint: undefined,
2025-07-30 19:06:57.05
901308a1
User
file: 'numutils.c',
2025-07-30 19:06:57.05
901308a1
User
line: '617',
2025-07-30 19:06:57.05
901308a1
User
routine: 'pg_strtoint32_safe',
2025-07-30 19:06:57.05
901308a1
User
sourceError: undefined
2025-07-30 19:06:57.05
901308a1
User
}
2025-07-30 20:06:47.07
901308a1
System
system: received signal terminated
2025-07-30 20:20:24.95
901308a1
System
starting up user application
2025-07-30 20:20:25.13
901308a1
System
forwarding local port 5000 to external port 80 (mapped as 1104)
2025-07-30 20:20:25.97
901308a1
User
> rest-express@1.0.0 start
2025-07-30 20:20:25.97
901308a1
User
> NODE_ENV=production node dist/index.js
2025-07-30 20:20:27.33
901308a1
User
Warning: connect.session() MemoryStore is not
2025-07-30 20:20:27.33
901308a1
User
designed for a production environment, as it will leak
2025-07-30 20:20:27.33
901308a1
User
memory, and will not scale past a single process.
2025-07-30 20:20:27.61
901308a1
User
1:20:27 AM [express] serving on port 5000

Wrap

Colors
Database connected
6 tables
29.33MB/10GB
Schema	Name	Type	Owner	Size	Description
public	capsule_interactions	table	neondb_owner	16 kB	
public	capsule_interactions_id_seq	sequence	neondb_owner	8192 bytes	
public	capsules	table	neondb_owner	16 kB	
public	capsules_id_seq	sequence	neondb_owner	8192 bytes	
public	nft_evolutions	table	neondb_owner	16 kB	
Docs
Powered by
User Settings
The following settings apply to your account and will be used across all your Apps.
Font Size
Change the font size of the editor.

normal
Accept Suggestion on Commit Character
Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (;) can be a commit character that accepts the suggestion and types the character.

Auto close brackets
Controls whether the editor should automatically close brackets after the user adds an opening bracket.

Indentation Detection
Automatically detect indentation settings when opening a file.

Format Pasted Text Indentation
Automatically format the indentation of pasted text.

Indentation Character
The character used for indenting lines.

spaces
Indentation Size
The number of columns taken up by an indentation level.
2
Wrapping
Change whether the editor wraps lines or not.

soft wrap
Minimap
Change the minimap display.

none
Rulers
Keybinds
Use another keyboard mapping

default
Multiselect Modifier Key
Modifier key for selecting multiple items in the filetree.

Alt
Filetree Git Status
Show the Git status of files in the file tree.

AI Code Completion
Code completion provides inline “ghost text” suggestions while you code.
Press tab or swipe right on your mobile device to accept.

Code Intelligence
Code intelligence gives you autocomplete, as well as hints as you type.

Semantic Tokens
Enables enhanced syntax highlighting from language servers.

Show Whitespace
Make whitespace characters visible, such as tabs and spaces.
Leading

Enclosed

Trailing

Selected

Accessible Terminal Output
Enable this setting to use a screen reader. Warning: this can negatively affect performance.

Shell Bell Audible Indicator
Play sound in the Shell on issues like a failed tab completion.

Automatic Preview
Open a web preview automatically when a port is open

Forward Opened Ports Automatically
Automatically configure detected newly opened ports.

all ports except localhost
Theme
select a theme
dark
Chat Audio Notification
Play a sound when you receive a new chat message.

Agent Audio Notification
Play a sound when the Agent needs your response.

Agent Push Notification
Send a push notification when the Agent needs your response.

Assistant Push Notification
Send a push notification when the Assistant needs your response.

/

Commit
Guide new and existing users through initial account setup and customization
Implements AI-assisted onboarding flow with profile customization and media upload routes, adds OnboardingChecker component, and updates schemas.


GUARDIANCHAIN
GUARDIANCHAIN
committed
1 hour ago
1 parent 
Filter changed files
Showing 8 changed files.


Unified

Split
App.tsx
client/src
Modified
client/src/components/auth
Modified
AIAssistedOnboarding.tsx
client/src/components/onboarding
Added
OnboardingChecker.tsx
client/src/components/onboarding
Added
routes.ts
server
Modified
ai-onboarding.ts
server/routes
Added
media-upload.ts
server/routes
Added
schema.ts
shared
Modified
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config";
import { nanoid } from "nanoid";

const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true as const,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(import.meta.dirname, "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

