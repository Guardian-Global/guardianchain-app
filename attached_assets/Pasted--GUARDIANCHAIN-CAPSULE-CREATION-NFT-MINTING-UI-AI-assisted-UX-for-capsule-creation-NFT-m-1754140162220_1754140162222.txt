// ðŸš€ GUARDIANCHAIN CAPSULE CREATION + NFT MINTING UI
// AI-assisted UX for capsule creation, NFT minting, pricing, and shareable output

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useAuth } from "@/hooks/useAuth";
import { mintCapsuleNFT } from "@/lib/nft/mint";
import { generateImageFromPrompt } from "@/lib/ai/imagegen";
import { calculateYieldEstimate } from "@/lib/finance/yield";

export default function CreateCapsule() {
  const { user, isAuthenticated } = useAuth();
  const [title, setTitle] = useState("");
  const [summary, setSummary] = useState("");
  const [image, setImage] = useState<string | null>(null);
  const [daysLocked, setDaysLocked] = useState(365);
  const [estimatedYield, setEstimatedYield] = useState("");
  const [minting, setMinting] = useState(false);
  const [mintedTokenId, setMintedTokenId] = useState<number | null>(null);

  const handleGenerateImage = async () => {
    const result = await generateImageFromPrompt(`${summary}`);
    setImage(result.url);
  };

  const handleEstimateYield = async () => {
    const estimate = await calculateYieldEstimate(daysLocked);
    setEstimatedYield(estimate);
  };

  const handleMint = async () => {
    setMinting(true);
    const tokenId = await mintCapsuleNFT({
      title,
      summary,
      image,
      daysLocked,
      creator: user?.wallet,
    });
    setMintedTokenId(tokenId);
    setMinting(false);
  };

  if (!isAuthenticated) return <p className="p-6">Please connect wallet to create a capsule.</p>;

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-4">
      <h1 className="text-3xl font-bold">Create a Time Capsule NFT</h1>

      <Input
        placeholder="Capsule Title"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
      />
      <Textarea
        placeholder="What's inside this capsule?"
        value={summary}
        onChange={(e) => setSummary(e.target.value)}
        rows={4}
      />

      <div className="space-y-2">
        <label>Days to Lock:</label>
        <Input
          type="number"
          value={daysLocked}
          onChange={(e) => setDaysLocked(parseInt(e.target.value))}
        />
        <Button onClick={handleEstimateYield}>Estimate Yield</Button>
        {estimatedYield && <p>Projected Yield: {estimatedYield}</p>}
      </div>

      <div className="space-y-2">
        <Button onClick={handleGenerateImage} variant="secondary">
          ðŸŽ¨ Generate AI Capsule Image
        </Button>
        {image && <img src={image} alt="AI generated preview" className="rounded-xl shadow" />}
      </div>

      <Button onClick={handleMint} disabled={minting} className="w-full text-lg">
        {minting ? "Minting..." : "ðŸª™ Mint Capsule as NFT"}
      </Button>

      {mintedTokenId && (
        <div className="p-4 bg-green-100 rounded-xl mt-4">
          Capsule Minted! Token ID: #{mintedTokenId} <br />
          <a
            href={`https://polygonscan.com/token/0xYourCapsuleContractAddress?a=${mintedTokenId}`}
            className="underline text-blue-600"
            target="_blank"
            rel="noopener noreferrer"
          >
            View on PolygonScan â†—
          </a>
        </div>
      )}
    </div>
  );
}
