// ✅ FILE: lib/auth.ts
import { getServerSession } from "next-auth";
import { authOptions } from "@/pages/api/auth/[...nextauth]";

export const getUserFromSession = async (req: any, res: any) => {
  const session = await getServerSession(req, res, authOptions);
  if (!session) return null;
  return session.user;
};


// ✅ FILE: pages/api/auth/session.ts
import { getServerSession } from "next-auth";
import { authOptions } from "./[...nextauth]";

export default async function handler(req, res) {
  const session = await getServerSession(req, res, authOptions);
  if (!session) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  res.status(200).json(session.user);
}


// ✅ FILE: pages/api/auth/[...nextauth].ts
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "Ethereum",
      credentials: {
        address: { label: "Wallet Address", type: "text" },
      },
      authorize: async (credentials) => {
        if (credentials?.address) {
          return { id: credentials.address, name: credentials.address };
        }
        return null;
      },
    }),
  ],
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) token.address = user.id;
      return token;
    },
    async session({ session, token }) {
      if (token?.address) session.user = { address: token.address };
      return session;
    },
  },
};

export default NextAuth(authOptions);


// ✅ FILE: middleware.ts
import { getToken } from "next-auth/jwt";
import { NextResponse } from "next/server";

export async function middleware(req) {
  const token = await getToken({ req });
  if (!token) {
    return NextResponse.redirect(new URL("/unauthorized", req.url));
  }
  return NextResponse.next();
}

export const config = {
  matcher: ["/vault", "/dashboard", "/mint"],
};


// ✅ FILE: components/WalletConnectProvider.tsx
"use client";

import { WagmiConfig, createConfig, configureChains } from "wagmi";
import { polygon, base } from "wagmi/chains";
import { publicProvider } from "wagmi/providers/public";
import { jsonRpcProvider } from "wagmi/providers/jsonRpc";
import { InjectedConnector } from "wagmi/connectors/injected";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

const { chains, publicClient } = configureChains(
  [polygon, base],
  [
    jsonRpcProvider({
      rpc: (chain) => ({
        http:
          chain.id === 137
            ? "https://polygon-rpc.com"
            : "https://mainnet.base.org",
      }),
    }),
    publicProvider(),
  ]
);

const wagmiConfig = createConfig({
  autoConnect: true,
  publicClient,
  connectors: [
    new InjectedConnector({
      chains,
    }),
  ],
});

const queryClient = new QueryClient();

export default function WalletConnectProvider({ children }) {
  return (
    <WagmiConfig config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </WagmiConfig>
  );
}


// ✅ FILE: hooks/useWallet.ts
import { useAccount, useDisconnect } from "wagmi";

export const useWallet = () => {
  const { address, isConnected, connector } = useAccount();
  const { disconnect } = useDisconnect();

  return {
    address,
    isConnected,
    connectorName: connector?.name || "None",
    disconnect,
  };
};
