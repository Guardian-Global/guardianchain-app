✅ PART 1: VeritasCapsuleNFT.sol — THE CONTRACT
📄 Create contracts/VeritasCapsuleNFT.sol

solidity
Copy
Edit
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract VeritasCapsuleNFT is ERC721URIStorageUpgradeable, OwnableUpgradeable, UUPSUpgradeable {
    uint256 public nextTokenId;
    mapping(uint256 => bool) public isSoulbound;
    mapping(uint256 => uint256) public griefScore;

    event SealMinted(address indexed minter, uint256 tokenId, bool soulbound, uint256 grief);

    function initialize() public initializer {
        __ERC721_init("VeritasCapsuleNFT", "VCNFT");
        __Ownable_init();
        __UUPSUpgradeable_init();
        nextTokenId = 1;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}

    function mintVeritasSeal(address to, string memory uri, bool soulbound, uint256 grief) public onlyOwner returns (uint256) {
        uint256 tokenId = nextTokenId++;
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, uri);
        isSoulbound[tokenId] = soulbound;
        griefScore[tokenId] = grief;
        emit SealMinted(to, tokenId, soulbound, grief);
        return tokenId;
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {
        require(!isSoulbound[tokenId] || from == address(0), "Soulbound: can't transfer");
        super._beforeTokenTransfer(from, to, tokenId);
    }
}
✅ PART 2: Deploy Script
📄 Update scripts/deploy.cjs

Add this after your existing contracts:

js
Copy
Edit
const VeritasCapsuleNFT = await hre.ethers.getContractFactory("VeritasCapsuleNFT");
const veritasNFT = await upgrades.deployProxy(VeritasCapsuleNFT, [], { initializer: 'initialize' });
await veritasNFT.deployed();
console.log("VeritasCapsuleNFT deployed to:", veritasNFT.address);
⚙️ Make sure to install OpenZeppelin upgrades:

bash
Copy
Edit
npm install @openzeppelin/contracts-upgradeable @openzeppelin/hardhat-upgrades
✅ PART 3: Frontend Mint UI
📄 Create client/src/pages/mint-nft.tsx

tsx
Copy
Edit
import { useState } from "react";

export default function MintNFT() {
  const [uri, setUri] = useState("");
  const [soulbound, setSoulbound] = useState(true);
  const [grief, setGrief] = useState("42");
  const [txHash, setTxHash] = useState("");

  const handleMint = async () => {
    // Simulated mint call
    console.log("Minting:", { uri, soulbound, grief });
    setTxHash("0xSimulatedTxHash");
  };

  return (
    <main className="container">
      <h2>Mint Veritas Capsule</h2>
      <input placeholder="IPFS Metadata URI" value={uri} onChange={e => setUri(e.target.value)} />
      <label>
        <input type="checkbox" checked={soulbound} onChange={e => setSoulbound(e.target.checked)} />
        Soulbound?
      </label>
      <input placeholder="Grief Score" value={grief} onChange={e => setGrief(e.target.value)} />
      <button onClick={handleMint}>Mint Capsule NFT</button>
      {txHash && <p>✅ Minted! TX: {txHash}</p>}
    </main>
  );
}
Add to navigation.tsx:

tsx
Copy
Edit
<li><a href="/mint-nft">Mint NFT</a></li>
✅ PART 4: Marketplace UI (Starter)
📄 Create client/src/pages/marketplace.tsx

tsx
Copy
Edit
const mockCapsules = [
  {
    tokenId: 1,
    image: "https://guardianchain.img/ipfs/img1.png",
    grief: 42,
    soulbound: true,
  },
  {
    tokenId: 2,
    image: "https://guardianchain.img/ipfs/img2.png",
    grief: 17,
    soulbound: false,
  },
];

export default function Marketplace() {
  return (
    <main className="container">
      <h2>GuardianChain Capsule Marketplace</h2>
      <div className="grid">
        {mockCapsules.map((capsule) => (
          <figure key={capsule.tokenId}>
            <img src={capsule.image} alt="capsule" />
            <figcaption>
              Token #{capsule.tokenId} <br />
              Grief Score: {capsule.grief} <br />
              {capsule.soulbound ? "Soulbound" : "Transferable"}
              <br />
              <a href="#">View</a>
            </figcaption>
          </figure>
        ))}
      </div>
    </main>
  );
}
Add to navigation.tsx:

tsx
Copy
Edit
<li><a href="/marketplace">Marketplace</a></li>
✅ WHAT TO DO NOW
Create all files exactly as above

Run this in your Replit shell to install contracts:

bash
Copy
Edit
npm install @openzeppelin/contracts-upgradeable @openzeppelin/hardhat-upgrades
Deploy the contract with:

bash
Copy
Edit
npx hardhat run scripts/deploy.cjs --network sepolia
