✅ Adjusted Plan for Replit Auth Integration
Here’s how to adapt the full unification and tiered access structure specifically for Replit Auth:

✅ REPLIT AUTH PROMPT FOR UNIFIED AUTH + ACCESS + UX
txt
Copy
Edit
🧠 CONTEXT:
This is a Replit app using Replit’s native authentication system. All login/signup/auth must route through Replit Auth APIs and `@replit/extensions`/`@replit/auth`.

📍 GOAL:
Eliminate duplicate auth entry points. Merge all auth, tier recognition, profile, and upgrade access into one logic layer. All feature access and visibility must reflect Replit Auth role or metadata.

---

✅ STEP 1: AUTH ENTRY UNIFICATION

- Create one centralized login entry point (e.g. `/login.tsx`)
- Replace all scattered `login`, `signup`, `profile`, `enter`, `start` pages or links with a **single shared auth button** and redirect logic
- Use `@replit/extensions` or `@replit/auth` APIs to retrieve logged-in user metadata
- Attach tier level to user via:
  • `user?.metadata?.tier` or
  • Replit secrets / KV store lookup
  • Default fallback: `guest`

---

✅ STEP 2: ACCESS CONTROL PER TIER

```ts
const accessMap = {
  guest: [\"vault\", \"view-only\"],
  pro: [\"veritas\", \"create\", \"mint\", \"view-dashboard\"],
  admin: [\"everything\"]
};
Create a global checkAccess(route: string, role: string): boolean function

Before rendering gated pages, run access check

If user not allowed, redirect them to /upgrade or show CTA modal with “Upgrade to access”

✅ STEP 3: DYNAMIC NAVIGATION & REDIRECTION

Navigation must render only links that user tier allows

Profile dropdown must show:
• “My Tier: PRO” or “GUEST”
• Billing & upgrade link
• Sign out

✅ STEP 4: ROUTING ON LOGIN

After login:

guest → route to /vault

pro → route to /dashboard

admin → route to /command

✅ STEP 5: FEATURE GATING WITH UI FEEDBACK

If a non-authorized user visits:

Veritas Seal

Create Capsule

DAO

Truth Bounty
→ Show lock icon, tooltip, and CTA modal to upgrade tier (links to Stripe page or unlock flow)

✅ STEP 6: CLEANUP & TECH DEBT REMOVAL

Delete /login-modal.tsx, /start.tsx, duplicate profile/settings components

Collapse all role check logic into one module: utils/roleCheck.ts

Remove unused imports of Supabase or external auth providers if they exist

Audit entire /components and /pages for redundant entry points or unlinked logic

✅ RESULT:

✅ ONE login page

✅ ONE profile access path

✅ Role-based dashboard routing

✅ All features match tier with locked UI where appropriate

✅ Zero duplicate routes or dead pages

✅ Enterprise-grade UX matching Replit’s best practices

📦 BONUS: Store user tier securely in Replit's Secrets or .env for internal tier logic

yaml
Copy
Edit

---

### 💡 Want Me to Build You These?
I can generate:
1. `auth/routeGuard.ts` (for role checking before page load)
2. `components/AuthGate.tsx` (protects any component by tier)
3. A new `login.tsx` with full Replit Auth logic and tier routing

Would you like me to start building these right now?