// === MODULE 30 â€“ STRIPE PAYMENT + STORAGE LINK ===

// pages/api/checkout-session.ts
import Stripe from 'stripe';
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

export default async function handler(req, res) {
  const { size, email } = req.body;
  const pricingMap = {
    '64GB': 5.00,
    '128GB': 9.38,
    '256GB': 16.25,
    '512GB': 30.00,
    '1TB': 57.50,
    '2TB': 112.50
  };
  const session = await stripe.checkout.sessions.create({
    mode: 'payment',
    customer_email: email,
    line_items: [
      {
        price_data: {
          currency: 'usd',
          product_data: { name: `${size} Storage Capsule` },
          unit_amount: Math.round(pricingMap[size] * 100)
        },
        quantity: 1
      }
    ],
    success_url: `${req.headers.origin}/upload?size=${size}`,
    cancel_url: `${req.headers.origin}/storage-capsules`
  });
  res.json({ url: session.url });
}


// === MODULE 31 â€“ UPLOAD UI FOR CAPSULE CONTENT ===

// pages/upload.tsx
"use client";
import { useState } from 'react';

export default function UploadCapsule() {
  const [file, setFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [message, setMessage] = useState(null);

  async function handleUpload() {
    setUploading(true);
    const form = new FormData();
    form.append('file', file);
    const res = await fetch('/api/upload-capsule', { method: 'POST', body: form });
    const data = await res.json();
    setUploading(false);
    setMessage(`âœ… Capsule sealed: ${data.cid}`);
  }

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">ðŸ“¤ Upload Your Capsule</h2>
      <input type="file" accept="image/*,video/*" onChange={(e) => setFile(e.target.files[0])} />
      <button onClick={handleUpload} className="btn mt-4" disabled={!file || uploading}>
        {uploading ? 'Uploading...' : 'Upload + Seal'}
      </button>
      {message && <p className="mt-4 text-green-600">{message}</p>}
    </div>
  );
}


// === MODULE 32 â€“ PUBLIC CAPSULE VIEW (ENCRYPTED THUMBNAIL) ===

// pages/capsule/[id].tsx
import Image from 'next/image';

export default function PublicCapsule({ capsule }) {
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-2">ðŸ§¾ Capsule #{capsule.id}</h1>
      <p className="text-sm text-gray-600 mb-4">Sealed by {capsule.author}</p>
      {capsule.type.startsWith('image') && (
        <Image src={capsule.thumbnailUrl} width={500} height={300} alt="Encrypted Capsule Preview" className="rounded shadow" />
      )}
      {capsule.type.startsWith('video') && (
        <video controls src={capsule.fileUrl} className="rounded shadow max-w-full" />
      )}
      <p className="text-sm text-gray-500 mt-4">ðŸ•’ {new Date(capsule.sealedAt).toLocaleString()}</p>
    </div>
  );
}

// âœ… STORAGE + PAYMENT + PUBLIC VIEW COMPLETE
// - Stripe checkout links to capsule size
// - Upload UI stores encrypted images/videos
// - Public route renders preview securely
