// components/profile/MediaRemixUploader.tsx
"use client";
import { useState } from "react";

export default function MediaRemixUploader({ userId }: { userId: string }) {
  const [file, setFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [prompt, setPrompt] = useState("");
  const [outputUrl, setOutputUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  function handleDrop(e: React.DragEvent) {
    e.preventDefault();
    const dropped = e.dataTransfer.files[0];
    if (dropped && dropped.type.startsWith("image")) {
      setFile(dropped);
      setPreviewUrl(URL.createObjectURL(dropped));
    }
  }

  async function remixImage() {
    if (!file || !prompt) return;
    setLoading(true);

    const formData = new FormData();
    formData.append("file", file);
    formData.append("upload_preset", "guardian_upload"); // Cloudinary preset or custom backend upload

    // 1. Upload image
    const uploadRes = await fetch("https://api.cloudinary.com/v1_1/YOUR_CLOUD_NAME/image/upload", {
      method: "POST",
      body: formData
    });
    const uploadData = await uploadRes.json();

    // 2. Call remix API
    const remixRes = await fetch("/api/media/remix", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        inputUrl: uploadData.secure_url,
        prompt,
      })
    });

    const remixData = await remixRes.json();
    setOutputUrl(remixData.output?.[0]);
    setLoading(false);
  }

  return (
    <div className="bg-slate-800 rounded-xl p-6 space-y-4 text-white">
      <h3 className="text-xl font-semibold">ðŸŽ¨ Remix Image with AI</h3>
      <div
        className="border-2 border-dashed border-slate-600 p-6 rounded-xl text-center cursor-pointer hover:border-indigo-500"
        onDrop={handleDrop}
        onDragOver={(e) => e.preventDefault()}
      >
        {previewUrl ? (
          <img src={previewUrl} alt="preview" className="mx-auto max-h-40 rounded-md" />
        ) : (
          <p>Drag & drop an image here to upload</p>
        )}
      </div>
      <input
        className="w-full p-2 bg-slate-700 rounded"
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
        placeholder="Describe the transformation (e.g. Van Gogh style)"
      />
      <button
        className="bg-indigo-600 px-4 py-2 rounded text-white hover:bg-indigo-500"
        onClick={remixImage}
        disabled={loading}
      >
        {loading ? "Remixing..." : "Remix Image"}
      </button>
      {outputUrl && (
        <div className="pt-4">
          <h4 className="font-semibold">Remixed Output:</h4>
          <img src={outputUrl} alt="remixed" className="mx-auto mt-2 rounded-md shadow" />
        </div>
      )}
    </div>
  );
}