// public/offline.html â€” GuardianChain Branded Fallback Page
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>GuardianChain Offline</title>
  <link rel="manifest" href="/manifest.json" />
  <style>
    body { font-family: sans-serif; background: #0f172a; color: white; text-align: center; padding: 3rem; }
    h1 { font-size: 2rem; margin-bottom: 1rem; }
    p { font-size: 0.95rem; color: #cbd5e1; }
    .capsule-icon { font-size: 3rem; margin: 1.5rem 0; }
  </style>
</head>
<body>
  <div>
    <div class="capsule-icon">ðŸ“´</div>
    <h1>You're Offline</h1>
    <p>
      GuardianChain is currently unavailable. Internet is required to mint, replay, and sync truth capsules.
    </p>
    <p style="margin-top: 2rem; font-style: italic;">
      Please reconnect to preserve your sovereign memory.
    </p>
  </div>
</body>
</html>


// components/PWAInstallButton.tsx â€” Add to Topbar or CapsuleDrawer
import { useEffect, useState } from "react";

export default function PWAInstallButton() {
  const [prompt, setPrompt] = useState<any>(null);

  useEffect(() => {
    const handler = (e: any) => {
      e.preventDefault();
      setPrompt(e);
    };
    window.addEventListener("beforeinstallprompt", handler);
    return () => window.removeEventListener("beforeinstallprompt", handler);
  }, []);

  if (!prompt) return null;

  return (
    <button
      onClick={() => prompt.prompt()}
      className="text-xs px-3 py-1 bg-indigo-700 text-white rounded shadow hover:bg-indigo-800"
    >
      ðŸ“² Install GuardianChain App
    </button>
  );
}


// sw.js (cached capsule replays and metadata â€” selective)
self.addEventListener("install", (e) => {
  e.waitUntil(
    caches.open("guardianchain-v2").then((cache) => {
      return cache.addAll(["/", "/offline.html"]);
    })
  );
});

self.addEventListener("fetch", (e) => {
  const url = new URL(e.request.url);
  if (url.pathname.startsWith("/api/replay-capsule") || url.pathname.startsWith("/api/metadata")) {
    e.respondWith(
      caches.match(e.request).then((res) => res || fetch(e.request))
    );
  } else {
    e.respondWith(
      fetch(e.request).catch(() => caches.match(e.request).then(r => r || caches.match("/offline.html")))
    );
  }
});
