# SPEC-02-GTT-Defi-Launch Deep Dive: Full Code & Features

## Background

We’re building a **turnkey** pipeline on Replit for the GTT token launch—covering everything from smart contract deployment to CEX/DEX listings, admin controls, monitoring, and CI/CD. This doc now includes **complete code**, **tests**, and **infrastructure-as-code** needed for end-to-end automation under your Master Admin.

---

## 1. Project Structure & Supporting Files

```
/ (repo root)
├─ .env.local
├─ .gitignore
├─ Dockerfile
├─ docker-compose.yml
├─ package.json
├─ hardhat.config.js
├─ tsconfig.json
├─ supabase
│   └─ migrations
│       ├─ 20250720_create_admins_table.sql
│       └─ 20250720_create_audit_logs.sql
│
├─ /scripts
│   ├─ deploy_gtt.js
│   ├─ deploy_staking.js
│   ├─ deploy_farm.js
│   ├─ addLiquidity.js
│   ├─ bridgeSetup.js
│   ├─ applyBinance.js
│   ├─ bootstrap_master_admin.js
│   ├─ claimYield.js
│   └─ postDeployNotify.js
│
├─ /contracts
│   ├─ GTTToken.sol
│   ├─ StakingPool.sol
│   └─ Farm.sol
│
├─ /frontend
│   ├─ next.config.js
│   ├─ /pages
│   │   ├─ index.tsx
│   │   └─ /admin
│   │       ├─ login.tsx
│   │       ├─ index.tsx
│   │       └─ invite.tsx
│   ├─ /components
│   │   ├─ AdminLayout.tsx
│   │   ├─ RoleManager.tsx
│   │   ├─ MonitorPanel.tsx
│   │   └─ TokenLaunchCard.tsx
│   └─ /styles
│       └─ globals.css
│
├─ /backend
│   ├─ Dockerfile
│   ├─ docker-compose.yml
│   ├─ src
│   │   ├─ index.ts
│   │   ├─ middleware/auth.ts
│   │   ├─ routes
│   │   │   ├─ auth.ts
│   │   │   ├─ admin.ts
│   │   │   └─ defi.ts
│   │   └─ lib
│   │       ├─ supabase.ts
│   │       └─ web3.ts
│   └─ tsconfig.json
│
└─ /monitoring
    ├─ prometheus.yml
    └─ grafana_dashboards.json
```

---

## 2. Secrets & Environment Setup

**Local (.env.local)**

```env
# Admin & Auth\ 
MASTER_ADMIN_EMAIL=alice@mycompany.com
MASTER_ADMIN_INIT_PASSWORD=<generated>
JWT_SECRET=<32-byte-hex>
OAUTH_COOKIE_SECRET=<32-byte-hex>
PASSWORD_PEPPER=<32-byte-hex>

# RPC & Keys
POLYGON_RPC_URL=https://rpc.ankr.com/polygon
ETHEREUM_RPC_URL=https://mainnet.infura.io/v3/<INFURA_ID>
BSC_RPC_URL=https://bsc-dataseed.binance.org/
PRIVATE_KEY_DEPLOYER=<0x...>
INFURA_ID=<...>

# CEX & Bridges
BINANCE_API_KEY=<...>
BINANCE_SECRET=<...>
COINBASE_API_KEY=<...>
BRIDGE_CBRIDGE_KEY=<...>
SUPABASE_SERVICE_ROLE_KEY=<...>
```

**Replit Secrets**: mirror each key/value in Replit’s Secrets panel.

---

## 3. Smart Contracts

### 3.1 GTTToken.sol

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract GTTToken is ERC20 {
    constructor() ERC20("Guardian Truth Token", "GTT") {
        _mint(msg.sender, 1_000_000_000 * 10 ** decimals());
    }
}
```

### 3.2 StakingPool.sol

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract StakingPool is ReentrancyGuard {
    IERC20 public stakingToken;
    IERC20 public rewardsToken;
    uint public rewardRate;
    mapping(address => uint) public balances;
    mapping(address => uint) public rewardDebt;

    constructor(address _stake, address _reward, uint _rate) {
        stakingToken = IERC20(_stake);
        rewardsToken = IERC20(_reward);
        rewardRate = _rate;
    }
    // stake, withdraw, claim functions with proper accounting
}
```

### 3.3 Farm.sol

```solidity
// similar pattern: LP staking with reward distribution
```

---

## 4. Database Migrations (Supabase)

### 4.1 Create Admins Table

```sql
-- supabase/migrations/20250720_create_admins_table.sql
create table if not exists public.admins (
  id uuid references auth.users(id) on delete cascade primary key,
  roles jsonb not null default '["MASTER"]',
  is_active boolean not null default false,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);
```

### 4.2 Create Audit Logs

```sql
-- supabase/migrations/20250720_create_audit_logs.sql
create table if not exists public.admin_audit_logs (
  id bigint generated always as identity primary key,
  actor uuid not null,
  target uuid,
  action text not null,
  metadata jsonb,
  created_at timestamptz not null default now()
);
```

Run migrations: `supabase db push` or `supabase migration run`.

---

## 5. Deployment & Utility Scripts

### 5.1 deploy\_gtt.js

```js
import { ethers, run } from 'hardhat';
import fs from 'fs';

async function main() {
  await run('compile');
  const networks = ['goerli','mumbai','bscTestnet'];
  for (const net of networks) {
    console.log(`Deploying GTT on ${net}...`);
    const { chainId } = await ethers.provider.getNetwork();
    const GTT = await ethers.getContractFactory('GTTToken');
    const token = await GTT.deploy();
    await token.deployed();
    console.log(`✅ GTT [${net}] @ ${token.address}`);
    // write to constants files
    fs.writeFileSync(
      `./frontend/src/constants.${net}.ts`,
      `export const GTT_ADDRESS = '${token.address}';\n`);
  }
}
main().catch(err => { console.error(err); process.exit(1); });
```

### 5.2 deploy\_staking.js

```js
import { ethers } from 'hardhat';

async function main() {
  await ethers.getSigners();
  const pool = await ethers.getContractFactory('StakingPool');
  const st = await pool.deploy(
    process.env.GTT_ADDRESS,
    process.env.GTT_ADDRESS,
    ethers.utils.parseUnits('100', 18)
  );
  await st.deployed();
  console.log('StakingPool @', st.address);
}
main().catch(console.error);
```

### 5.3 deploy\_farm.js

```js
// similar to deploy_staking.js
```

### 5.4 addLiquidity.js (see above)

### 5.5 bridgeSetup.js

```js
import { ethers } from 'hardhat';
import yargs from 'yargs';

// transfer via bridge contract, poll for events...
```

### 5.6 applyBinance.js

```js
// Use Binance API v3 client to submit token listing application
```

### 5.7 bootstrap\_master\_admin.js

```js
// Upsert Supabase auth user and admins row (see earlier)
```

### 5.8 claimYield.js

```js
// fetch pending yield from Supabase, call contract.claim() in batch
```

### 5.9 postDeployNotify.js

```js
import fetch from 'node-fetch';
// send Slack webhook, email summary
```

---

## 6. Frontend Components & Pages

### 6.1 pages/admin/login.tsx

```tsx
import { useState } from 'react';
import { useRouter } from 'next/router';

export default function Login() {
  const [email, setEmail] = useState('');
  const [pass, setPass] = useState('');
  const router = useRouter();
  const submit = async e => {
    e.preventDefault();
    const res = await fetch('/api/auth/login', {
      method:'POST', body: JSON.stringify({ email, password: pass })
    });
    if (res.ok) router.push('/admin');
    else alert('Login failed');
  };
  return (
    <form onSubmit={submit} className="max-w-sm mx-auto">
      {/* Inputs + submit button */}
    </form>
  );
}
```

### 6.2 pages/admin/index.tsx

Detailed dashboard combining **RoleManager**, **MonitorPanel**, **TokenLaunchCard**

### 6.3 pages/admin/invite.tsx

JWT validate, password form, call `/api/auth/invite`.

---

## 7. Backend API & RBAC (Express)

### 7.1 src/index.ts

```ts
import express from 'express';
import cookieParser from 'cookie-parser';
import authRoutes from './routes/auth';
import adminRoutes from './routes/admin';
import defiRoutes from './routes/defi';

const app = express();
app.use(express.json());
app.use(cookieParser());
app.use('/api/auth', authRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/defi', defiRoutes);
app.listen(3000, () => console.log('API running')); 
```

### 7.2 src/routes/admin.ts

Includes `/users`, `/roles`, `/defi/status`, `/defi/execute` with `requireAdmin`

### 7.3 src/lib/web3.ts

Helpers to connect to each RPC, send tx, wait confirmations, handle errors.

---

## 8. Testing

### 8.1 Unit Tests (Jest)

* **contracts/**: hardhat tests for token supply, staking behavior.
* **backend/**: tests for `auth.ts` login, `requireAdmin` middleware.

### 8.2 E2E Tests (Cypress)

```js
// cypress/e2e/admin.cy.ts
context('Admin flow', () => {
  it('Login as Master', () => {
    cy.visit('/admin/login');
    cy.get('input').first().type(Cypress.env('MASTER_ADMIN_EMAIL'));
    cy.get('input').eq(1).type(Cypress.env('MASTER_ADMIN_INIT_PASSWORD'));
    cy.get('button').click();
    cy.url().should('include','/admin');
  });
  it('Manage roles', () => { /* check checkboxes, save */ });
});
```

---

## 9. Monitoring & Alerts

### 9.1 Prometheus

* Scrape `/metrics` endpoint on both frontend and backend containers.
* **Custom metrics**: HTTP request durations, error counts, on-chain tx latency.

### 9.2 Grafana

Import `grafana_dashboards.json`. Key panels:

1. **API**: P95 latency, error rate
2. **DeFi**: TVL, pool reserves
3. **Bridge**: success/failure counts
4. **CEX**: application statuses over time

### 9.3 Alerts

* **High Error Rate** (>5% 5m) → Slack
* **Bridge Failures** (>1 failure/hr) → SMS
* **Low TVL** (TVL < threshold) → Email

---

## 10. CI/CD & Deployment Containers

### 10.1 Dockerfile (Backend)

```dockerfile
FROM node:18
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile
COPY . .
RUN yarn build
EXPOSE 3000
CMD ["node","dist/index.js"]
```

### 10.2 GitHub Actions CI

```yaml
# .github/workflows/ci.yml
ame: CI
on: [push]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: yarn install
      - run: yarn lint
      - run: yarn test:unit
      - run: yarn test:e2e
```

### 10.3 Replit Deployment

* On push to `main`, Replit runs build commands, then `scripts/deploy_gtt.js` and other scripts automatically. Logs appear in Replit console.

---

## 11. Master Admin Workflow & Controls

1. **Bootstrap Admin**: `node scripts/bootstrap_master_admin.js`
2. **Login**: `https://<app>/admin/login`
3. **Rotate Master**: RoleManager → Invite new MASTER → Demote old via UI
4. **Execute DeFi ops**: MonitorPanel triggers `/api/defi/execute` endpoints
5. **Audit & Review**: examine `admin_audit_logs` via SQL or custom analytics page

---

Review this fully detailed plan. Once approved, Master Admin can initiate a single-click deploy to bring GTT live across DeFi platforms—securely and with complete visibility.
