bsolutely. Below is the complete and extended ProtonMail integration stack, including all world-class features, modular triggers, and enhancements for a premium email experience within GuardianChain.

This version includes:

✅ Capsule Events
✅ AI Memory Save
✅ Legacy Executor
✅ DAO Vote Receipts
✅ Weekly Digest
✅ World-Class Features:

Opt-out preferences

Markdown → HTML conversion

Email preview logging

Modular email templates

Open tracking pixel stub

Admin override notifications

📁 /src/lib/mailer.ts
ts
Copy
Edit
import nodemailer from "nodemailer";
import { renderMarkdown } from "./renderMarkdown";
import { getUserPreferences } from "../utils/emailPrefs";

export const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: parseInt(process.env.SMTP_PORT || "587"),
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

export async function sendGuardianEmail({
  to,
  subject,
  markdown,
  html,
  text,
  forceSend = false,
}: {
  to: string;
  subject: string;
  markdown?: string;
  html?: string;
  text?: string;
  forceSend?: boolean;
}) {
  const prefs = await getUserPreferences(to);
  if (!prefs?.emailEnabled && !forceSend) {
    console.log(`📭 Email disabled for ${to}`);
    return;
  }

  const finalHtml = html || renderMarkdown(markdown || "");
  const plain = text || (markdown || "").replace(/[#_*`]/g, "");

  const res = await transporter.sendMail({
    from: `"GuardianChain AI" <${process.env.SMTP_USER}>`,
    to,
    subject,
    text: plain,
    html: finalHtml + `<img src="https://track.guardianchain.ai/pixel?email=${encodeURIComponent(to)}" width="1" height="1"/>`,
  });

  console.log(`✉️ Sent to ${to}: ${subject}`);
  return res;
}
📁 /src/lib/renderMarkdown.ts
ts
Copy
Edit
import { marked } from "marked";

export function renderMarkdown(markdown: string): string {
  return marked.parse(markdown);
}
📁 /src/utils/emailPrefs.ts
ts
Copy
Edit
// Example stub, replace with Supabase fetch
const emailPrefsDB = {
  "user@example.com": { emailEnabled: true },
  "noreply@guardian.org": { emailEnabled: false },
};

export async function getUserPreferences(email: string) {
  return emailPrefsDB[email.toLowerCase()] || { emailEnabled: true };
}
📁 /src/notifications/notifyMemorySave.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function notifyMemorySaved({ user, message, reply, threadId }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "🧠 GuardianAI Memory Saved",
    markdown: `
## 🧠 New Memory Stored

Your AI has saved a significant interaction.

**Prompt:** ${message}

**Reply:** ${reply}

Thread ID: ${threadId}
`,
  });
}
📁 /src/notifications/triggerCapsuleEvent.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function notifyCapsuleRemix({ user, capsuleId, remixerName }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "📦 Capsule Remixed",
    markdown: `
## Capsule Remixed

Your capsule \`${capsuleId}\` was remixed by **${remixerName}**.

[View Dashboard](https://guardianchain.ai/dashboard)
`,
  });
}

export async function notifyCapsuleSealed({ user, capsuleId }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "🔒 Capsule Sealed",
    markdown: `
## Capsule Sealed

Your capsule \`${capsuleId}\` has been permanently sealed.
`,
  });
}
📁 /src/notifications/notifyLegacyTrigger.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function notifyLegacySetup({ user, delegate }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "👁️ Legacy AI Protocol Activated",
    markdown: `
## Legacy Setup Complete

You have authorized **${delegate}** as your capsule + AI heir.

This change is immutable and recorded on-chain.
`,
  });
}
📁 /src/notifications/sendWeeklyDigest.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function sendDigest(user: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "📈 Your GTT Capsule Report",
    markdown: `
## Weekly Capsule Summary

Hello **${user.name}**,

- Capsules sealed: **${user.sealedCount}**
- Capsules remixed: **${user.remixedCount}**
- GTT earned: **${user.weeklyYield} GTT**

[Open Portfolio](https://guardianchain.ai/portfolio)
`,
  });
}
📁 /src/notifications/notifyDAOVote.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function notifyDAOVote({ user, proposalTitle, vote }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "🗳️ DAO Vote Confirmed",
    markdown: `
## DAO Vote Receipt

You voted **${vote}** on:

**${proposalTitle}**

This has been recorded immutably on-chain.
`,
  });
}
📁 /src/notifications/notifyAdmin.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

const adminEmail = "admin@guardianchain.ai";

export async function notifyAdminOnCritical(message: string) {
  await sendGuardianEmail({
    to: adminEmail,
    subject: "⚠️ System Alert",
    markdown: `
## URGENT SYSTEM EVENT

${message}

[Open Dashboard](https://guardianchain.ai/admin)
`,
    forceSend: true,
  });
}
📁 /src/notifications/notifyOptOutNotice.ts
ts
Copy
Edit
import { sendGuardianEmail } from "../lib/mailer";

export async function notifyOptOut({ user }: any) {
  await sendGuardianEmail({
    to: user.email,
    subject: "🔕 Email Notifications Disabled",
    markdown: `
## Email Preferences Updated

You have disabled non-critical notifications.

Critical alerts will still be sent when necessary.
`,
  });
}
✅ ENVIRONMENT VARIABLES
env
Copy
Edit
SMTP_HOST=smtp.protonmail.ch
SMTP_PORT=587
SMTP_USER=capsule@axiomdoa.org
SMTP_PASS=your-protonmail-generated-token
✅ FINAL STATUS
Your system now includes:

✅ Modular Email Templates (Markdown → HTML)
✅ Preferences & Opt-outs
✅ Open Tracking (pixel stub included)
✅ Admin & User Alerts
✅ All Key Events: Memory, Capsules, Legacy, DAO, Digest

Would you like me to now:

✅ Add Replit deployment script
✅ Bundle all into exportable zip
✅ Integrate preferences into Supabase